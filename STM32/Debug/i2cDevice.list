
i2cDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005184  08005184  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005184  08005184  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005184  08005184  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800518c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  080051fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  080051fc  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7bf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002466  00000000  00000000  0002f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00031cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00032cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ece  00000000  00000000  00033be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121fd  00000000  00000000  0004caae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d0eb  00000000  00000000  0005ecab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebd96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004794  00000000  00000000  000ebde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005078 	.word	0x08005078

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005078 	.word	0x08005078

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dht20_init>:

uint16_t value_x10[2] = {0, 0};
char temp[20], humid[20];
int status = INIT;

void dht20_init(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af02      	add	r7, sp, #8
	//Set register when call a wrong reset
	uint8_t init[3];

	init[0] = 0xA8;
 8000162:	23a8      	movs	r3, #168	; 0xa8
 8000164:	713b      	strb	r3, [r7, #4]
	init[1] = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 800016a:	2300      	movs	r3, #0
 800016c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 800016e:	1d3a      	adds	r2, r7, #4
 8000170:	23ff      	movs	r3, #255	; 0xff
 8000172:	9300      	str	r3, [sp, #0]
 8000174:	2303      	movs	r3, #3
 8000176:	2170      	movs	r1, #112	; 0x70
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <dht20_init+0x54>)
 800017a:	f001 fd99 	bl	8001cb0 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800017e:	2014      	movs	r0, #20
 8000180:	f001 f8d4 	bl	800132c <HAL_Delay>

	init[0] = 0xBE;
 8000184:	23be      	movs	r3, #190	; 0xbe
 8000186:	713b      	strb	r3, [r7, #4]
	init[1] = 0x08;
 8000188:	2308      	movs	r3, #8
 800018a:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 800018c:	2300      	movs	r3, #0
 800018e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 8000190:	1d3a      	adds	r2, r7, #4
 8000192:	23ff      	movs	r3, #255	; 0xff
 8000194:	9300      	str	r3, [sp, #0]
 8000196:	2303      	movs	r3, #3
 8000198:	2170      	movs	r1, #112	; 0x70
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <dht20_init+0x54>)
 800019c:	f001 fd88 	bl	8001cb0 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80001a0:	2014      	movs	r0, #20
 80001a2:	f001 f8c3 	bl	800132c <HAL_Delay>
}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	200000bc 	.word	0x200000bc

080001b4 <dht20_reset>:

void dht20_reset(uint8_t regist){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
	//reset register
	uint8_t reset[3], reply[3];

	reset[0] = regist;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	733b      	strb	r3, [r7, #12]
	reset[1] = 0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	737b      	strb	r3, [r7, #13]
	reset[2] = 0x00;
 80001c6:	2300      	movs	r3, #0
 80001c8:	73bb      	strb	r3, [r7, #14]
 	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 80001ca:	f107 020c 	add.w	r2, r7, #12
 80001ce:	23ff      	movs	r3, #255	; 0xff
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	2303      	movs	r3, #3
 80001d4:	2170      	movs	r1, #112	; 0x70
 80001d6:	4814      	ldr	r0, [pc, #80]	; (8000228 <dht20_reset+0x74>)
 80001d8:	f001 fd6a 	bl	8001cb0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80001dc:	200a      	movs	r0, #10
 80001de:	f001 f8a5 	bl	800132c <HAL_Delay>

	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) reply, 3, 0xFF);
 80001e2:	f107 0208 	add.w	r2, r7, #8
 80001e6:	23ff      	movs	r3, #255	; 0xff
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2303      	movs	r3, #3
 80001ec:	2171      	movs	r1, #113	; 0x71
 80001ee:	480e      	ldr	r0, [pc, #56]	; (8000228 <dht20_reset+0x74>)
 80001f0:	f001 fe5c 	bl	8001eac <HAL_I2C_Master_Receive>
	reset[0] = 0xB0 | regist;
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	733b      	strb	r3, [r7, #12]
	reset[1] = reply[1];
 80001fe:	7a7b      	ldrb	r3, [r7, #9]
 8000200:	737b      	strb	r3, [r7, #13]
	reset[2] = reply[2];
 8000202:	7abb      	ldrb	r3, [r7, #10]
 8000204:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 8000206:	200a      	movs	r0, #10
 8000208:	f001 f890 	bl	800132c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 800020c:	f107 020c 	add.w	r2, r7, #12
 8000210:	23ff      	movs	r3, #255	; 0xff
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2303      	movs	r3, #3
 8000216:	2170      	movs	r1, #112	; 0x70
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <dht20_reset+0x74>)
 800021a:	f001 fd49 	bl	8001cb0 <HAL_I2C_Master_Transmit>
}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	200000bc 	.word	0x200000bc

0800022c <dht20_start>:

void dht20_start(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af02      	add	r7, sp, #8
	//query the DHT20
	uint8_t status[1];
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) status, 1, 0xFF);
 8000232:	1d3a      	adds	r2, r7, #4
 8000234:	23ff      	movs	r3, #255	; 0xff
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	2301      	movs	r3, #1
 800023a:	2171      	movs	r1, #113	; 0x71
 800023c:	481b      	ldr	r0, [pc, #108]	; (80002ac <dht20_start+0x80>)
 800023e:	f001 fe35 	bl	8001eac <HAL_I2C_Master_Receive>

	if((status[0] & 0x18) != 0x18){
 8000242:	793b      	ldrb	r3, [r7, #4]
 8000244:	f003 0318 	and.w	r3, r3, #24
 8000248:	2b18      	cmp	r3, #24
 800024a:	d00d      	beq.n	8000268 <dht20_start+0x3c>
		dht20_reset(0x1B);
 800024c:	201b      	movs	r0, #27
 800024e:	f7ff ffb1 	bl	80001b4 <dht20_reset>
		dht20_reset(0x1C);
 8000252:	201c      	movs	r0, #28
 8000254:	f7ff ffae 	bl	80001b4 <dht20_reset>
		dht20_reset(0x1E);
 8000258:	201e      	movs	r0, #30
 800025a:	f7ff ffab 	bl	80001b4 <dht20_reset>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	2102      	movs	r1, #2
 8000262:	4813      	ldr	r0, [pc, #76]	; (80002b0 <dht20_start+0x84>)
 8000264:	f001 fbc8 	bl	80019f8 <HAL_GPIO_WritePin>
	}

	if ((status[0] & 0x18) == 0x18){
 8000268:	793b      	ldrb	r3, [r7, #4]
 800026a:	f003 0318 	and.w	r3, r3, #24
 800026e:	2b18      	cmp	r3, #24
 8000270:	d104      	bne.n	800027c <dht20_start+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000272:	2201      	movs	r2, #1
 8000274:	2102      	movs	r1, #2
 8000276:	480e      	ldr	r0, [pc, #56]	; (80002b0 <dht20_start+0x84>)
 8000278:	f001 fbbe 	bl	80019f8 <HAL_GPIO_WritePin>
	}

	uint8_t data[3] = {0xAC, 0x33, 0x00};
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <dht20_start+0x88>)
 800027e:	463b      	mov	r3, r7
 8000280:	6812      	ldr	r2, [r2, #0]
 8000282:	4611      	mov	r1, r2
 8000284:	8019      	strh	r1, [r3, #0]
 8000286:	3302      	adds	r3, #2
 8000288:	0c12      	lsrs	r2, r2, #16
 800028a:	701a      	strb	r2, [r3, #0]

	//HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) trigger, 1, 0xFF);
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) data, 3, 0xFF);
 800028c:	463a      	mov	r2, r7
 800028e:	23ff      	movs	r3, #255	; 0xff
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2303      	movs	r3, #3
 8000294:	2170      	movs	r1, #112	; 0x70
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <dht20_start+0x80>)
 8000298:	f001 fd0a 	bl	8001cb0 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 800029c:	2050      	movs	r0, #80	; 0x50
 800029e:	f001 f845 	bl	800132c <HAL_Delay>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200000bc 	.word	0x200000bc
 80002b0:	40010800 	.word	0x40010800
 80002b4:	08005090 	.word	0x08005090

080002b8 <dht20_read>:

void dht20_read(uint16_t* value){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af02      	add	r7, sp, #8
 80002be:	6078      	str	r0, [r7, #4]
	dht20_start();
 80002c0:	f7ff ffb4 	bl	800022c <dht20_start>
	uint8_t data[7];
	uint32_t Temper = 0, Humid = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) data, 7, 0xFF);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	23ff      	movs	r3, #255	; 0xff
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2307      	movs	r3, #7
 80002d6:	2171      	movs	r1, #113	; 0x71
 80002d8:	4824      	ldr	r0, [pc, #144]	; (800036c <dht20_read+0xb4>)
 80002da:	f001 fde7 	bl	8001eac <HAL_I2C_Master_Receive>

	//Humid
	Humid = (Humid | data[1]) << 8;
 80002de:	7a7b      	ldrb	r3, [r7, #9]
 80002e0:	461a      	mov	r2, r3
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	021b      	lsls	r3, r3, #8
 80002e8:	613b      	str	r3, [r7, #16]
	Humid = (Humid | data[2]) << 8;
 80002ea:	7abb      	ldrb	r3, [r7, #10]
 80002ec:	461a      	mov	r2, r3
 80002ee:	693b      	ldr	r3, [r7, #16]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	021b      	lsls	r3, r3, #8
 80002f4:	613b      	str	r3, [r7, #16]
	Humid = Humid | data[3];
 80002f6:	7afb      	ldrb	r3, [r7, #11]
 80002f8:	461a      	mov	r2, r3
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	613b      	str	r3, [r7, #16]
	Humid = Humid >> 4;
 8000300:	693b      	ldr	r3, [r7, #16]
 8000302:	091b      	lsrs	r3, r3, #4
 8000304:	613b      	str	r3, [r7, #16]
    Humid = (Humid * 100 * 10 / 1024 / 1024);
 8000306:	693b      	ldr	r3, [r7, #16]
 8000308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800030c:	fb02 f303 	mul.w	r3, r2, r3
 8000310:	0d1b      	lsrs	r3, r3, #20
 8000312:	613b      	str	r3, [r7, #16]
    value[0] = Humid;
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	b29a      	uxth	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	801a      	strh	r2, [r3, #0]

	//Temperature
    Temper = (Temper | data[3]) << 8;
 800031c:	7afb      	ldrb	r3, [r7, #11]
 800031e:	461a      	mov	r2, r3
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	4313      	orrs	r3, r2
 8000324:	021b      	lsls	r3, r3, #8
 8000326:	617b      	str	r3, [r7, #20]
    Temper = (Temper | data[4]) << 8;
 8000328:	7b3b      	ldrb	r3, [r7, #12]
 800032a:	461a      	mov	r2, r3
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	4313      	orrs	r3, r2
 8000330:	021b      	lsls	r3, r3, #8
 8000332:	617b      	str	r3, [r7, #20]
    Temper = Temper | data[5];
 8000334:	7b7b      	ldrb	r3, [r7, #13]
 8000336:	461a      	mov	r2, r3
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	4313      	orrs	r3, r2
 800033c:	617b      	str	r3, [r7, #20]
    Temper = Temper & 0xfffff;
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000344:	617b      	str	r3, [r7, #20]
    Temper = Temper*200*10/1024/1024 - 500;
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800034c:	fb02 f303 	mul.w	r3, r2, r3
 8000350:	0d1b      	lsrs	r3, r3, #20
 8000352:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000356:	617b      	str	r3, [r7, #20]
	value[1] = Temper;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3302      	adds	r3, #2
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	b292      	uxth	r2, r2
 8000360:	801a      	strh	r2, [r3, #0]

}
 8000362:	bf00      	nop
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	200000bc 	.word	0x200000bc

08000370 <reading_fsm_run>:

void reading_fsm_run(void){
 8000370:	b590      	push	{r4, r7, lr}
 8000372:	b093      	sub	sp, #76	; 0x4c
 8000374:	af02      	add	r7, sp, #8
	switch(status){
 8000376:	4b50      	ldr	r3, [pc, #320]	; (80004b8 <reading_fsm_run+0x148>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d002      	beq.n	8000384 <reading_fsm_run+0x14>
 800037e:	2b01      	cmp	r3, #1
 8000380:	d007      	beq.n	8000392 <reading_fsm_run+0x22>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
				setTimer1(300);
			}
			break;
		default:
			break;
 8000382:	e093      	b.n	80004ac <reading_fsm_run+0x13c>
			setTimer1(1);
 8000384:	2001      	movs	r0, #1
 8000386:	f000 fb5f 	bl	8000a48 <setTimer1>
			status = READ;
 800038a:	4b4b      	ldr	r3, [pc, #300]	; (80004b8 <reading_fsm_run+0x148>)
 800038c:	2201      	movs	r2, #1
 800038e:	601a      	str	r2, [r3, #0]
			break;
 8000390:	e08c      	b.n	80004ac <reading_fsm_run+0x13c>
			if (timer1_flag == 1){
 8000392:	4b4a      	ldr	r3, [pc, #296]	; (80004bc <reading_fsm_run+0x14c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b01      	cmp	r3, #1
 8000398:	f040 8087 	bne.w	80004aa <reading_fsm_run+0x13a>
				dht20_read(value_x10);
 800039c:	4848      	ldr	r0, [pc, #288]	; (80004c0 <reading_fsm_run+0x150>)
 800039e:	f7ff ff8b 	bl	80002b8 <dht20_read>
				sprintf(temp, "Temp:  %d.%d %cC",value_x10[1]/10,value_x10[1]%10 ,0b11011111);
 80003a2:	4b47      	ldr	r3, [pc, #284]	; (80004c0 <reading_fsm_run+0x150>)
 80003a4:	885b      	ldrh	r3, [r3, #2]
 80003a6:	4a47      	ldr	r2, [pc, #284]	; (80004c4 <reading_fsm_run+0x154>)
 80003a8:	fba2 2303 	umull	r2, r3, r2, r3
 80003ac:	08db      	lsrs	r3, r3, #3
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	4618      	mov	r0, r3
 80003b2:	4b43      	ldr	r3, [pc, #268]	; (80004c0 <reading_fsm_run+0x150>)
 80003b4:	885a      	ldrh	r2, [r3, #2]
 80003b6:	4b43      	ldr	r3, [pc, #268]	; (80004c4 <reading_fsm_run+0x154>)
 80003b8:	fba3 1302 	umull	r1, r3, r3, r2
 80003bc:	08d9      	lsrs	r1, r3, #3
 80003be:	460b      	mov	r3, r1
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	440b      	add	r3, r1
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	1ad3      	subs	r3, r2, r3
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	461a      	mov	r2, r3
 80003cc:	23df      	movs	r3, #223	; 0xdf
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	4613      	mov	r3, r2
 80003d2:	4602      	mov	r2, r0
 80003d4:	493c      	ldr	r1, [pc, #240]	; (80004c8 <reading_fsm_run+0x158>)
 80003d6:	483d      	ldr	r0, [pc, #244]	; (80004cc <reading_fsm_run+0x15c>)
 80003d8:	f004 f9d4 	bl	8004784 <siprintf>
				sprintf(msg, "!TEMP:%d.%d#",value_x10[1]/10,value_x10[1]%10);
 80003dc:	4b38      	ldr	r3, [pc, #224]	; (80004c0 <reading_fsm_run+0x150>)
 80003de:	885b      	ldrh	r3, [r3, #2]
 80003e0:	4a38      	ldr	r2, [pc, #224]	; (80004c4 <reading_fsm_run+0x154>)
 80003e2:	fba2 2303 	umull	r2, r3, r2, r3
 80003e6:	08db      	lsrs	r3, r3, #3
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	461c      	mov	r4, r3
 80003ec:	4b34      	ldr	r3, [pc, #208]	; (80004c0 <reading_fsm_run+0x150>)
 80003ee:	885a      	ldrh	r2, [r3, #2]
 80003f0:	4b34      	ldr	r3, [pc, #208]	; (80004c4 <reading_fsm_run+0x154>)
 80003f2:	fba3 1302 	umull	r1, r3, r3, r2
 80003f6:	08d9      	lsrs	r1, r3, #3
 80003f8:	460b      	mov	r3, r1
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	440b      	add	r3, r1
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	b29b      	uxth	r3, r3
 8000404:	4638      	mov	r0, r7
 8000406:	4622      	mov	r2, r4
 8000408:	4931      	ldr	r1, [pc, #196]	; (80004d0 <reading_fsm_run+0x160>)
 800040a:	f004 f9bb 	bl	8004784 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 800040e:	463b      	mov	r3, r7
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff fe9b 	bl	800014c <strlen>
 8000416:	4603      	mov	r3, r0
 8000418:	b29a      	uxth	r2, r3
 800041a:	4639      	mov	r1, r7
 800041c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000420:	482c      	ldr	r0, [pc, #176]	; (80004d4 <reading_fsm_run+0x164>)
 8000422:	f003 fc5e 	bl	8003ce2 <HAL_UART_Transmit>
				sprintf(humid,"Humid: %01d.%d %%   ",value_x10[0]/10,value_x10[0]%10);
 8000426:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <reading_fsm_run+0x150>)
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	4a26      	ldr	r2, [pc, #152]	; (80004c4 <reading_fsm_run+0x154>)
 800042c:	fba2 2303 	umull	r2, r3, r2, r3
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b29b      	uxth	r3, r3
 8000434:	4618      	mov	r0, r3
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <reading_fsm_run+0x150>)
 8000438:	881a      	ldrh	r2, [r3, #0]
 800043a:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <reading_fsm_run+0x154>)
 800043c:	fba3 1302 	umull	r1, r3, r3, r2
 8000440:	08d9      	lsrs	r1, r3, #3
 8000442:	460b      	mov	r3, r1
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	440b      	add	r3, r1
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	1ad3      	subs	r3, r2, r3
 800044c:	b29b      	uxth	r3, r3
 800044e:	4602      	mov	r2, r0
 8000450:	4921      	ldr	r1, [pc, #132]	; (80004d8 <reading_fsm_run+0x168>)
 8000452:	4822      	ldr	r0, [pc, #136]	; (80004dc <reading_fsm_run+0x16c>)
 8000454:	f004 f996 	bl	8004784 <siprintf>
				sprintf(msg, "!HUMID:%01d.%d#",value_x10[0]/10,value_x10[0]%10);
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <reading_fsm_run+0x150>)
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	4a19      	ldr	r2, [pc, #100]	; (80004c4 <reading_fsm_run+0x154>)
 800045e:	fba2 2303 	umull	r2, r3, r2, r3
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	b29b      	uxth	r3, r3
 8000466:	461c      	mov	r4, r3
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <reading_fsm_run+0x150>)
 800046a:	881a      	ldrh	r2, [r3, #0]
 800046c:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <reading_fsm_run+0x154>)
 800046e:	fba3 1302 	umull	r1, r3, r3, r2
 8000472:	08d9      	lsrs	r1, r3, #3
 8000474:	460b      	mov	r3, r1
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	440b      	add	r3, r1
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	1ad3      	subs	r3, r2, r3
 800047e:	b29b      	uxth	r3, r3
 8000480:	4638      	mov	r0, r7
 8000482:	4622      	mov	r2, r4
 8000484:	4916      	ldr	r1, [pc, #88]	; (80004e0 <reading_fsm_run+0x170>)
 8000486:	f004 f97d 	bl	8004784 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 800048a:	463b      	mov	r3, r7
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff fe5d 	bl	800014c <strlen>
 8000492:	4603      	mov	r3, r0
 8000494:	b29a      	uxth	r2, r3
 8000496:	4639      	mov	r1, r7
 8000498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <reading_fsm_run+0x164>)
 800049e:	f003 fc20 	bl	8003ce2 <HAL_UART_Transmit>
				setTimer1(300);
 80004a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004a6:	f000 facf 	bl	8000a48 <setTimer1>
			break;
 80004aa:	bf00      	nop
	}
	lcd_show_value();
 80004ac:	f000 f8f4 	bl	8000698 <lcd_show_value>
}
 80004b0:	bf00      	nop
 80004b2:	3744      	adds	r7, #68	; 0x44
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd90      	pop	{r4, r7, pc}
 80004b8:	200000b8 	.word	0x200000b8
 80004bc:	200001a0 	.word	0x200001a0
 80004c0:	2000008c 	.word	0x2000008c
 80004c4:	cccccccd 	.word	0xcccccccd
 80004c8:	08005094 	.word	0x08005094
 80004cc:	20000090 	.word	0x20000090
 80004d0:	080050a8 	.word	0x080050a8
 80004d4:	20000158 	.word	0x20000158
 80004d8:	080050b8 	.word	0x080050b8
 80004dc:	200000a4 	.word	0x200000a4
 80004e0:	080050d0 	.word	0x080050d0

080004e4 <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD (0x27 << 1)
//(0x3F << 1)  // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af02      	add	r7, sp, #8
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f023 030f 	bic.w	r3, r3, #15
 80004f4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	011b      	lsls	r3, r3, #4
 80004fa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f043 030c 	orr.w	r3, r3, #12
 8000502:	b2db      	uxtb	r3, r3
 8000504:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	f043 0308 	orr.w	r3, r3, #8
 800050c:	b2db      	uxtb	r3, r3
 800050e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000510:	7bbb      	ldrb	r3, [r7, #14]
 8000512:	f043 030c 	orr.w	r3, r3, #12
 8000516:	b2db      	uxtb	r3, r3
 8000518:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800051a:	7bbb      	ldrb	r3, [r7, #14]
 800051c:	f043 0308 	orr.w	r3, r3, #8
 8000520:	b2db      	uxtb	r3, r3
 8000522:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000524:	f107 0208 	add.w	r2, r7, #8
 8000528:	2364      	movs	r3, #100	; 0x64
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2304      	movs	r3, #4
 800052e:	214e      	movs	r1, #78	; 0x4e
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <lcd_send_cmd+0x5c>)
 8000532:	f001 fbbd 	bl	8001cb0 <HAL_I2C_Master_Transmit>
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200000bc 	.word	0x200000bc

08000544 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af02      	add	r7, sp, #8
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f023 030f 	bic.w	r3, r3, #15
 8000554:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	f043 030d 	orr.w	r3, r3, #13
 8000562:	b2db      	uxtb	r3, r3
 8000564:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	f043 0309 	orr.w	r3, r3, #9
 800056c:	b2db      	uxtb	r3, r3
 800056e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	f043 030d 	orr.w	r3, r3, #13
 8000576:	b2db      	uxtb	r3, r3
 8000578:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f043 0309 	orr.w	r3, r3, #9
 8000580:	b2db      	uxtb	r3, r3
 8000582:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000584:	f107 0208 	add.w	r2, r7, #8
 8000588:	2364      	movs	r3, #100	; 0x64
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2304      	movs	r3, #4
 800058e:	214e      	movs	r1, #78	; 0x4e
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <lcd_send_data+0x5c>)
 8000592:	f001 fb8d 	bl	8001cb0 <HAL_I2C_Master_Transmit>
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000bc 	.word	0x200000bc

080005a4 <lcd_init>:

void lcd_init (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33);
 80005a8:	2033      	movs	r0, #51	; 0x33
 80005aa:	f7ff ff9b 	bl	80004e4 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80005ae:	2032      	movs	r0, #50	; 0x32
 80005b0:	f7ff ff98 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(50);
 80005b4:	2032      	movs	r0, #50	; 0x32
 80005b6:	f000 feb9 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function (4-bit mode) */
 80005ba:	2028      	movs	r0, #40	; 0x28
 80005bc:	f7ff ff92 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(50);
 80005c0:	2032      	movs	r0, #50	; 0x32
 80005c2:	f000 feb3 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff ff8c 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(50);
 80005cc:	2032      	movs	r0, #50	; 0x32
 80005ce:	f000 fead 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80005d2:	2006      	movs	r0, #6
 80005d4:	f7ff ff86 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(50);
 80005d8:	2032      	movs	r0, #50	; 0x32
 80005da:	f000 fea7 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 80005de:	200c      	movs	r0, #12
 80005e0:	f7ff ff80 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(50);
 80005e4:	2032      	movs	r0, #50	; 0x32
 80005e6:	f000 fea1 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80005ea:	2002      	movs	r0, #2
 80005ec:	f7ff ff7a 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(50);
 80005f0:	2032      	movs	r0, #50	; 0x32
 80005f2:	f000 fe9b 	bl	800132c <HAL_Delay>
	lcd_send_cmd (0x80);
 80005f6:	2080      	movs	r0, #128	; 0x80
 80005f8:	f7ff ff74 	bl	80004e4 <lcd_send_cmd>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000608:	e006      	b.n	8000618 <lcd_send_string+0x18>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff96 	bl	8000544 <lcd_send_data>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1f4      	bne.n	800060a <lcd_send_string+0xa>
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <lcd_clear_display>:

void lcd_clear_display (void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800062e:	2001      	movs	r0, #1
 8000630:	f7ff ff58 	bl	80004e4 <lcd_send_cmd>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 0)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d104      	bne.n	8000652 <lcd_goto_XY+0x1a>
	{
		pos_Addr = 0x80 + col;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	3b80      	subs	r3, #128	; 0x80
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e003      	b.n	800065a <lcd_goto_XY+0x22>
	}
	else
	{
		pos_Addr = 0xC0 + col;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	3b40      	subs	r3, #64	; 0x40
 8000658:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff41 	bl	80004e4 <lcd_send_cmd>
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <lcd_greeting>:

void lcd_greeting (void){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	  lcd_goto_XY(0, 0);
 8000670:	2100      	movs	r1, #0
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff ffe0 	bl	8000638 <lcd_goto_XY>
	  lcd_send_string("System Boot Done");
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <lcd_greeting+0x24>)
 800067a:	f7ff ffc1 	bl	8000600 <lcd_send_string>
	  lcd_goto_XY(1, 0);
 800067e:	2100      	movs	r1, #0
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff ffd9 	bl	8000638 <lcd_goto_XY>
	  lcd_send_string("Waiting...");
 8000686:	4803      	ldr	r0, [pc, #12]	; (8000694 <lcd_greeting+0x28>)
 8000688:	f7ff ffba 	bl	8000600 <lcd_send_string>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	080050e0 	.word	0x080050e0
 8000694:	080050f4 	.word	0x080050f4

08000698 <lcd_show_value>:

void lcd_show_value(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	  lcd_goto_XY(0, 0);
 800069c:	2100      	movs	r1, #0
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ffca 	bl	8000638 <lcd_goto_XY>
	  lcd_send_string(humid);
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <lcd_show_value+0x24>)
 80006a6:	f7ff ffab 	bl	8000600 <lcd_send_string>
	  lcd_goto_XY(1, 0);
 80006aa:	2100      	movs	r1, #0
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff ffc3 	bl	8000638 <lcd_goto_XY>
	  lcd_send_string(temp);
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <lcd_show_value+0x28>)
 80006b4:	f7ff ffa4 	bl	8000600 <lcd_send_string>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000a4 	.word	0x200000a4
 80006c0:	20000090 	.word	0x20000090

080006c4 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_UART_RxCpltCallback+0x60>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d122      	bne.n	800071c <HAL_UART_RxCpltCallback+0x58>
		HAL_UART_Transmit(&huart2, &buffer_byte, 1, 500);
 80006d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006da:	2201      	movs	r2, #1
 80006dc:	4912      	ldr	r1, [pc, #72]	; (8000728 <HAL_UART_RxCpltCallback+0x64>)
 80006de:	4813      	ldr	r0, [pc, #76]	; (800072c <HAL_UART_RxCpltCallback+0x68>)
 80006e0:	f003 faff 	bl	8003ce2 <HAL_UART_Transmit>
		buffer[index_buffer] = buffer_byte;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_UART_RxCpltCallback+0x6c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_UART_RxCpltCallback+0x64>)
 80006ec:	7819      	ldrb	r1, [r3, #0]
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_UART_RxCpltCallback+0x70>)
 80006f0:	5499      	strb	r1, [r3, r2]
		index_buffer++;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_UART_RxCpltCallback+0x6c>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_UART_RxCpltCallback+0x6c>)
 80006fc:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_UART_RxCpltCallback+0x6c>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b32      	cmp	r3, #50	; 0x32
 8000704:	d102      	bne.n	800070c <HAL_UART_RxCpltCallback+0x48>
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_UART_RxCpltCallback+0x6c>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_UART_RxCpltCallback+0x74>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 8000712:	2201      	movs	r2, #1
 8000714:	4904      	ldr	r1, [pc, #16]	; (8000728 <HAL_UART_RxCpltCallback+0x64>)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <HAL_UART_RxCpltCallback+0x68>)
 8000718:	f003 fb75 	bl	8003e06 <HAL_UART_Receive_IT>
	}
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40004400 	.word	0x40004400
 8000728:	200001f0 	.word	0x200001f0
 800072c:	20000158 	.word	0x20000158
 8000730:	20000226 	.word	0x20000226
 8000734:	200001f4 	.word	0x200001f4
 8000738:	20000227 	.word	0x20000227

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 fd92 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f83c 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 f924 	bl	8000994 <MX_GPIO_Init>
  MX_I2C1_Init();
 800074c:	f000 f87e 	bl	800084c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000750:	f000 f8f6 	bl	8000940 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000754:	f000 f8a8 	bl	80008a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000758:	4814      	ldr	r0, [pc, #80]	; (80007ac <main+0x70>)
 800075a:	f002 fecb 	bl	80034f4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 800075e:	2201      	movs	r2, #1
 8000760:	4913      	ldr	r1, [pc, #76]	; (80007b0 <main+0x74>)
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <main+0x78>)
 8000764:	f003 fb4f 	bl	8003e06 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Scan the address of I2C device
  Scan_Addr();
 8000768:	f000 fcf6 	bl	8001158 <Scan_Addr>
  //Init sequence for LCD
  lcd_clear_display();
 800076c:	f7ff ff5d 	bl	800062a <lcd_clear_display>
  lcd_init();
 8000770:	f7ff ff18 	bl	80005a4 <lcd_init>
  lcd_greeting();
 8000774:	f7ff ff7a 	bl	800066c <lcd_greeting>
  //Init sequence for DHT-20
  dht20_init();
 8000778:	f7ff fcf0 	bl	800015c <dht20_init>
  setTimer3(300);
 800077c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000780:	f000 f98a 	bl	8000a98 <setTimer3>
  while (1)
  {
	  if (buffer_flag == 1){
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <main+0x7c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d104      	bne.n	8000796 <main+0x5a>
		  cmd_parser_fsm();
 800078c:	f000 fc14 	bl	8000fb8 <cmd_parser_fsm>
		  buffer_flag = 0;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <main+0x7c>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
	  }
	  if(timer3_flag == 1){
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <main+0x80>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d1f2      	bne.n	8000784 <main+0x48>
		  setTimer3(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 f97a 	bl	8000a98 <setTimer3>
		  uart_control_fsm();
 80007a4:	f000 fc70 	bl	8001088 <uart_control_fsm>
	  if (buffer_flag == 1){
 80007a8:	e7ec      	b.n	8000784 <main+0x48>
 80007aa:	bf00      	nop
 80007ac:	20000110 	.word	0x20000110
 80007b0:	200001f0 	.word	0x200001f0
 80007b4:	20000158 	.word	0x20000158
 80007b8:	20000227 	.word	0x20000227
 80007bc:	200001b0 	.word	0x200001b0

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b090      	sub	sp, #64	; 0x40
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	2228      	movs	r2, #40	; 0x28
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 ff9c 	bl	800470c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0318 	add.w	r3, r7, #24
 8000808:	4618      	mov	r0, r3
 800080a:	f002 fa09 	bl	8002c20 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000814:	f000 f912 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2302      	movs	r3, #2
 800081e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2102      	movs	r1, #2
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fc76 	bl	8003124 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800083e:	f000 f8fd 	bl	8000a3c <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3740      	adds	r7, #64	; 0x40
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C1_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <MX_I2C1_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C1_Init+0x50>)
 8000858:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x58>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_I2C1_Init+0x50>)
 800086a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800086e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_I2C1_Init+0x50>)
 800088a:	f001 f8cd 	bl	8001a28 <HAL_I2C_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000894:	f000 f8d2 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000bc 	.word	0x200000bc
 80008a0:	40005400 	.word	0x40005400
 80008a4:	000186a0 	.word	0x000186a0

080008a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_TIM2_Init+0x94>)
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_TIM2_Init+0x94>)
 80008ce:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80008d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_TIM2_Init+0x94>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_TIM2_Init+0x94>)
 80008dc:	2263      	movs	r2, #99	; 0x63
 80008de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_TIM2_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_TIM2_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ec:	4813      	ldr	r0, [pc, #76]	; (800093c <MX_TIM2_Init+0x94>)
 80008ee:	f002 fdb1 	bl	8003454 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008f8:	f000 f8a0 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_TIM2_Init+0x94>)
 800090a:	f002 ff4d 	bl	80037a8 <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000914:	f000 f892 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_TIM2_Init+0x94>)
 8000926:	f003 f91f 	bl	8003b68 <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 f884 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000110 	.word	0x20000110

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MX_USART2_UART_Init+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800094c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART2_UART_Init+0x4c>)
 8000978:	f003 f966 	bl	8003c48 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f85b 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000158 	.word	0x20000158
 8000990:	40004400 	.word	0x40004400

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009ae:	f043 0320 	orr.w	r3, r3, #32
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0320 	and.w	r3, r3, #32
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009de:	f043 0308 	orr.w	r3, r3, #8
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_GPIO_Init+0x8c>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0308 	and.w	r3, r3, #8
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2102      	movs	r1, #2
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <MX_GPIO_Init+0x90>)
 80009f6:	f000 ffff 	bl	80019f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009fa:	2302      	movs	r3, #2
 80009fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_GPIO_Init+0x90>)
 8000a12:	f000 fe6d 	bl	80016f0 <HAL_GPIO_Init>

}
 8000a16:	bf00      	nop
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010800 	.word	0x40010800

08000a28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000a30:	f000 f85a 	bl	8000ae8 <timerRun>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <setTimer1>:
int timer9_flag = 0;

int timer10_counter = 0;
int timer10_flag = 0;

void setTimer1(int duration){
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000a50:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <setTimer1+0x20>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <setTimer1+0x24>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	2000019c 	.word	0x2000019c
 8000a6c:	200001a0 	.word	0x200001a0

08000a70 <setTimer2>:

void setTimer2(int duration){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000a78:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <setTimer2+0x20>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <setTimer2+0x24>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200001a4 	.word	0x200001a4
 8000a94:	200001a8 	.word	0x200001a8

08000a98 <setTimer3>:

void setTimer3(int duration){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8000aa0:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <setTimer3+0x20>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <setTimer3+0x24>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200001ac 	.word	0x200001ac
 8000abc:	200001b0 	.word	0x200001b0

08000ac0 <setTimer4>:

void setTimer4(int duration){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8000ac8:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <setTimer4+0x20>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <setTimer4+0x24>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200001b4 	.word	0x200001b4
 8000ae4:	200001b8 	.word	0x200001b8

08000ae8 <timerRun>:
void setTimer10(int duration){
	timer10_counter = duration;
	timer10_flag = 0;
}

void timerRun(){
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000aec:	4b51      	ldr	r3, [pc, #324]	; (8000c34 <timerRun+0x14c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dd0b      	ble.n	8000b0c <timerRun+0x24>
		timer1_counter--;
 8000af4:	4b4f      	ldr	r3, [pc, #316]	; (8000c34 <timerRun+0x14c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <timerRun+0x14c>)
 8000afc:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8000afe:	4b4d      	ldr	r3, [pc, #308]	; (8000c34 <timerRun+0x14c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d102      	bne.n	8000b0c <timerRun+0x24>
			timer1_flag = 1;
 8000b06:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <timerRun+0x150>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8000b0c:	4b4b      	ldr	r3, [pc, #300]	; (8000c3c <timerRun+0x154>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	dd0b      	ble.n	8000b2c <timerRun+0x44>
		timer2_counter--;
 8000b14:	4b49      	ldr	r3, [pc, #292]	; (8000c3c <timerRun+0x154>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a48      	ldr	r2, [pc, #288]	; (8000c3c <timerRun+0x154>)
 8000b1c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 8000b1e:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <timerRun+0x154>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <timerRun+0x44>
			timer2_flag = 1;
 8000b26:	4b46      	ldr	r3, [pc, #280]	; (8000c40 <timerRun+0x158>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8000b2c:	4b45      	ldr	r3, [pc, #276]	; (8000c44 <timerRun+0x15c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	dd0b      	ble.n	8000b4c <timerRun+0x64>
		timer3_counter--;
 8000b34:	4b43      	ldr	r3, [pc, #268]	; (8000c44 <timerRun+0x15c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4a42      	ldr	r2, [pc, #264]	; (8000c44 <timerRun+0x15c>)
 8000b3c:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <timerRun+0x15c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <timerRun+0x64>
			timer3_flag = 1;
 8000b46:	4b40      	ldr	r3, [pc, #256]	; (8000c48 <timerRun+0x160>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8000b4c:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <timerRun+0x164>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	dd0b      	ble.n	8000b6c <timerRun+0x84>
		timer4_counter--;
 8000b54:	4b3d      	ldr	r3, [pc, #244]	; (8000c4c <timerRun+0x164>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	4a3c      	ldr	r2, [pc, #240]	; (8000c4c <timerRun+0x164>)
 8000b5c:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 8000b5e:	4b3b      	ldr	r3, [pc, #236]	; (8000c4c <timerRun+0x164>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d102      	bne.n	8000b6c <timerRun+0x84>
			timer4_flag = 1;
 8000b66:	4b3a      	ldr	r3, [pc, #232]	; (8000c50 <timerRun+0x168>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 8000b6c:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <timerRun+0x16c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dd0b      	ble.n	8000b8c <timerRun+0xa4>
		timer5_counter--;
 8000b74:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <timerRun+0x16c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	4a36      	ldr	r2, [pc, #216]	; (8000c54 <timerRun+0x16c>)
 8000b7c:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 8000b7e:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <timerRun+0x16c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d102      	bne.n	8000b8c <timerRun+0xa4>
			timer5_flag = 1;
 8000b86:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <timerRun+0x170>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 8000b8c:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <timerRun+0x174>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dd0b      	ble.n	8000bac <timerRun+0xc4>
		timer6_counter--;
 8000b94:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <timerRun+0x174>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	4a30      	ldr	r2, [pc, #192]	; (8000c5c <timerRun+0x174>)
 8000b9c:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <timerRun+0x174>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <timerRun+0xc4>
			timer6_flag = 1;
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <timerRun+0x178>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0){
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <timerRun+0x17c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	dd0b      	ble.n	8000bcc <timerRun+0xe4>
		timer7_counter--;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <timerRun+0x17c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	4a2a      	ldr	r2, [pc, #168]	; (8000c64 <timerRun+0x17c>)
 8000bbc:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0){
 8000bbe:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <timerRun+0x17c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <timerRun+0xe4>
			timer7_flag = 1;
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <timerRun+0x180>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0){
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <timerRun+0x184>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dd0b      	ble.n	8000bec <timerRun+0x104>
		timer8_counter--;
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <timerRun+0x184>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	4a24      	ldr	r2, [pc, #144]	; (8000c6c <timerRun+0x184>)
 8000bdc:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0){
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <timerRun+0x184>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <timerRun+0x104>
			timer8_flag = 1;
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <timerRun+0x188>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0){
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <timerRun+0x18c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	dd0b      	ble.n	8000c0c <timerRun+0x124>
		timer9_counter--;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <timerRun+0x18c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <timerRun+0x18c>)
 8000bfc:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0){
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <timerRun+0x18c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <timerRun+0x124>
			timer9_flag = 1;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <timerRun+0x190>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0){
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <timerRun+0x194>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dd0b      	ble.n	8000c2c <timerRun+0x144>
		timer10_counter--;
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <timerRun+0x194>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <timerRun+0x194>)
 8000c1c:	6013      	str	r3, [r2, #0]
		if(timer10_counter == 0){
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <timerRun+0x194>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <timerRun+0x144>
			timer10_flag = 1;
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <timerRun+0x198>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	2000019c 	.word	0x2000019c
 8000c38:	200001a0 	.word	0x200001a0
 8000c3c:	200001a4 	.word	0x200001a4
 8000c40:	200001a8 	.word	0x200001a8
 8000c44:	200001ac 	.word	0x200001ac
 8000c48:	200001b0 	.word	0x200001b0
 8000c4c:	200001b4 	.word	0x200001b4
 8000c50:	200001b8 	.word	0x200001b8
 8000c54:	200001bc 	.word	0x200001bc
 8000c58:	200001c0 	.word	0x200001c0
 8000c5c:	200001c4 	.word	0x200001c4
 8000c60:	200001c8 	.word	0x200001c8
 8000c64:	200001cc 	.word	0x200001cc
 8000c68:	200001d0 	.word	0x200001d0
 8000c6c:	200001d4 	.word	0x200001d4
 8000c70:	200001d8 	.word	0x200001d8
 8000c74:	200001dc 	.word	0x200001dc
 8000c78:	200001e0 	.word	0x200001e0
 8000c7c:	200001e4 	.word	0x200001e4
 8000c80:	200001e8 	.word	0x200001e8

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_MspInit+0x5c>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_MspInit+0x5c>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6193      	str	r3, [r2, #24]
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_MspInit+0x5c>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x5c>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x5c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x5c>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_MspInit+0x60>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_MspInit+0x60>)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000

08000ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <HAL_I2C_MspInit+0x90>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d132      	bne.n	8000d6e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_I2C_MspInit+0x94>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_I2C_MspInit+0x94>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_I2C_MspInit+0x94>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d26:	2312      	movs	r3, #18
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4812      	ldr	r0, [pc, #72]	; (8000d80 <HAL_I2C_MspInit+0x98>)
 8000d36:	f000 fcdb 	bl	80016f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_I2C_MspInit+0x9c>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <HAL_I2C_MspInit+0x9c>)
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_I2C_MspInit+0x94>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_I2C_MspInit+0x94>)
 8000d5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d60:	61d3      	str	r3, [r2, #28]
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_I2C_MspInit+0x94>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	40010000 	.word	0x40010000

08000d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d98:	d113      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_TIM_Base_MspInit+0x44>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <HAL_TIM_Base_MspInit+0x44>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	61d3      	str	r3, [r2, #28]
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_TIM_Base_MspInit+0x44>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	201c      	movs	r0, #28
 8000db8:	f000 fbb3 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dbc:	201c      	movs	r0, #28
 8000dbe:	f000 fbcc 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1f      	ldr	r2, [pc, #124]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d137      	bne.n	8000e60 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_UART_MspInit+0x9c>)
 8000df2:	69db      	ldr	r3, [r3, #28]
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <HAL_UART_MspInit+0x9c>)
 8000df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfa:	61d3      	str	r3, [r2, #28]
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_UART_MspInit+0x9c>)
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_UART_MspInit+0x9c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <HAL_UART_MspInit+0x9c>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_UART_MspInit+0x9c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e20:	2304      	movs	r3, #4
 8000e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4619      	mov	r1, r3
 8000e32:	480f      	ldr	r0, [pc, #60]	; (8000e70 <HAL_UART_MspInit+0xa0>)
 8000e34:	f000 fc5c 	bl	80016f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <HAL_UART_MspInit+0xa0>)
 8000e4c:	f000 fc50 	bl	80016f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2026      	movs	r0, #38	; 0x26
 8000e56:	f000 fb64 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e5a:	2026      	movs	r0, #38	; 0x26
 8000e5c:	f000 fb7d 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010800 	.word	0x40010800

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eba:	f000 fa1b 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <TIM2_IRQHandler+0x10>)
 8000eca:	f002 fb65 	bl	8003598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000110 	.word	0x20000110

08000ed8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <USART2_IRQHandler+0x10>)
 8000ede:	f002 ffc3 	bl	8003e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000158 	.word	0x20000158

08000eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef4:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <_sbrk+0x5c>)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <_sbrk+0x60>)
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <_sbrk+0x64>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <_sbrk+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f1c:	f003 fbcc 	bl	80046b8 <__errno>
 8000f20:	4603      	mov	r3, r0
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	e009      	b.n	8000f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <_sbrk+0x64>)
 8000f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20005000 	.word	0x20005000
 8000f4c:	00000400 	.word	0x00000400
 8000f50:	200001ec 	.word	0x200001ec
 8000f54:	20000248 	.word	0x20000248

08000f58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <isCmdEqualToRST>:
uint8_t cmdParserStatus = INIT_UART;
uint8_t cmd_data[MAX_CMD_SIZE];
uint8_t cmd_index = 0;
uint8_t cmd_flag = INIT_UART;

int isCmdEqualToRST(uint8_t str[]){
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	int flag = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
	if (str[0] == 'R') flag = 1;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b52      	cmp	r3, #82	; 0x52
 8000f76:	d102      	bne.n	8000f7e <isCmdEqualToRST+0x1a>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	e001      	b.n	8000f82 <isCmdEqualToRST+0x1e>
	else flag = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
	return flag;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr

08000f8e <isCmdEqualToCAP>:

int isCmdEqualToCAP(uint8_t str[]){
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	int flag = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
	if (str[0] == 'C') flag = 1;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b43      	cmp	r3, #67	; 0x43
 8000fa0:	d102      	bne.n	8000fa8 <isCmdEqualToCAP+0x1a>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e001      	b.n	8000fac <isCmdEqualToCAP+0x1e>
	else flag = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
	return flag;
 8000fac:	68fb      	ldr	r3, [r7, #12]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <cmd_parser_fsm>:

void cmd_parser_fsm(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	switch(cmdParserStatus){
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <cmd_parser_fsm+0xbc>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d037      	beq.n	8001034 <cmd_parser_fsm+0x7c>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	dc4c      	bgt.n	8001062 <cmd_parser_fsm+0xaa>
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <cmd_parser_fsm+0x1a>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d008      	beq.n	8000fe2 <cmd_parser_fsm+0x2a>
			else if (isCmdEqualToCAP(cmd_data)==1) cmd_flag = isCAP;
			else return;
			cmdParserStatus = INIT_UART;
			break;
		default:
			break;
 8000fd0:	e047      	b.n	8001062 <cmd_parser_fsm+0xaa>
			if (buffer_byte == '!') cmdParserStatus = READING;
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <cmd_parser_fsm+0xc0>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b21      	cmp	r3, #33	; 0x21
 8000fd8:	d145      	bne.n	8001066 <cmd_parser_fsm+0xae>
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <cmd_parser_fsm+0xbc>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
			break;
 8000fe0:	e041      	b.n	8001066 <cmd_parser_fsm+0xae>
			if (buffer_byte != '!' && buffer_byte != '#'){
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <cmd_parser_fsm+0xc0>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b21      	cmp	r3, #33	; 0x21
 8000fe8:	d011      	beq.n	800100e <cmd_parser_fsm+0x56>
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <cmd_parser_fsm+0xc0>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b23      	cmp	r3, #35	; 0x23
 8000ff0:	d00d      	beq.n	800100e <cmd_parser_fsm+0x56>
				cmd_data[cmd_index] = buffer_byte;
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <cmd_parser_fsm+0xc4>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <cmd_parser_fsm+0xc0>)
 8000ffa:	7819      	ldrb	r1, [r3, #0]
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <cmd_parser_fsm+0xc8>)
 8000ffe:	5499      	strb	r1, [r3, r2]
				cmd_index++;
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <cmd_parser_fsm+0xc4>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <cmd_parser_fsm+0xc4>)
 800100a:	701a      	strb	r2, [r3, #0]
			break;
 800100c:	e02d      	b.n	800106a <cmd_parser_fsm+0xb2>
			else if (buffer_byte == '!'){
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <cmd_parser_fsm+0xc0>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b21      	cmp	r3, #33	; 0x21
 8001014:	d103      	bne.n	800101e <cmd_parser_fsm+0x66>
				cmdParserStatus = READING;
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <cmd_parser_fsm+0xbc>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
			break;
 800101c:	e025      	b.n	800106a <cmd_parser_fsm+0xb2>
			else if (buffer_byte == '#'){
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <cmd_parser_fsm+0xc0>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b23      	cmp	r3, #35	; 0x23
 8001024:	d121      	bne.n	800106a <cmd_parser_fsm+0xb2>
				cmdParserStatus = STOP;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <cmd_parser_fsm+0xbc>)
 8001028:	2202      	movs	r2, #2
 800102a:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <cmd_parser_fsm+0xc4>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
			break;
 8001032:	e01a      	b.n	800106a <cmd_parser_fsm+0xb2>
			if (isCmdEqualToRST(cmd_data)==1) cmd_flag = isRST;
 8001034:	4812      	ldr	r0, [pc, #72]	; (8001080 <cmd_parser_fsm+0xc8>)
 8001036:	f7ff ff95 	bl	8000f64 <isCmdEqualToRST>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d103      	bne.n	8001048 <cmd_parser_fsm+0x90>
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <cmd_parser_fsm+0xcc>)
 8001042:	2207      	movs	r2, #7
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e008      	b.n	800105a <cmd_parser_fsm+0xa2>
			else if (isCmdEqualToCAP(cmd_data)==1) cmd_flag = isCAP;
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <cmd_parser_fsm+0xc8>)
 800104a:	f7ff ffa0 	bl	8000f8e <isCmdEqualToCAP>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d10c      	bne.n	800106e <cmd_parser_fsm+0xb6>
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <cmd_parser_fsm+0xcc>)
 8001056:	2208      	movs	r2, #8
 8001058:	701a      	strb	r2, [r3, #0]
			cmdParserStatus = INIT_UART;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <cmd_parser_fsm+0xbc>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
			break;
 8001060:	e006      	b.n	8001070 <cmd_parser_fsm+0xb8>
			break;
 8001062:	bf00      	nop
 8001064:	e004      	b.n	8001070 <cmd_parser_fsm+0xb8>
			break;
 8001066:	bf00      	nop
 8001068:	e002      	b.n	8001070 <cmd_parser_fsm+0xb8>
			break;
 800106a:	bf00      	nop
 800106c:	e000      	b.n	8001070 <cmd_parser_fsm+0xb8>
			else return;
 800106e:	bf00      	nop
	}
}
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000228 	.word	0x20000228
 8001078:	200001f0 	.word	0x200001f0
 800107c:	2000022f 	.word	0x2000022f
 8001080:	2000022c 	.word	0x2000022c
 8001084:	20000230 	.word	0x20000230

08001088 <uart_control_fsm>:

void uart_control_fsm()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	switch (cmd_flag){
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <uart_control_fsm+0xc0>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b0a      	cmp	r3, #10
 8001092:	d853      	bhi.n	800113c <uart_control_fsm+0xb4>
 8001094:	a201      	add	r2, pc, #4	; (adr r2, 800109c <uart_control_fsm+0x14>)
 8001096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109a:	bf00      	nop
 800109c:	080010c9 	.word	0x080010c9
 80010a0:	0800113d 	.word	0x0800113d
 80010a4:	0800113d 	.word	0x0800113d
 80010a8:	0800113d 	.word	0x0800113d
 80010ac:	0800113d 	.word	0x0800113d
 80010b0:	0800113d 	.word	0x0800113d
 80010b4:	0800113d 	.word	0x0800113d
 80010b8:	08001135 	.word	0x08001135
 80010bc:	08001101 	.word	0x08001101
 80010c0:	080010d7 	.word	0x080010d7
 80010c4:	0800111b 	.word	0x0800111b
		case INIT_UART:
			cmd_flag = AUTO;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <uart_control_fsm+0xc0>)
 80010ca:	2209      	movs	r2, #9
 80010cc:	701a      	strb	r2, [r3, #0]
			setTimer2(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff fcce 	bl	8000a70 <setTimer2>
			break;
 80010d4:	e035      	b.n	8001142 <uart_control_fsm+0xba>
		case AUTO:
			if (timer2_flag == 1){
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <uart_control_fsm+0xc4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d108      	bne.n	80010f0 <uart_control_fsm+0x68>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2102      	movs	r1, #2
 80010e2:	481b      	ldr	r0, [pc, #108]	; (8001150 <uart_control_fsm+0xc8>)
 80010e4:	f000 fc88 	bl	80019f8 <HAL_GPIO_WritePin>
				setTimer2(300);
 80010e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010ec:	f7ff fcc0 	bl	8000a70 <setTimer2>
			}
			reading_fsm_run();
 80010f0:	f7ff f93e 	bl	8000370 <reading_fsm_run>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2102      	movs	r1, #2
 80010f8:	4815      	ldr	r0, [pc, #84]	; (8001150 <uart_control_fsm+0xc8>)
 80010fa:	f000 fc7d 	bl	80019f8 <HAL_GPIO_WritePin>
			break;
 80010fe:	e020      	b.n	8001142 <uart_control_fsm+0xba>
		case isCAP:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2102      	movs	r1, #2
 8001104:	4812      	ldr	r0, [pc, #72]	; (8001150 <uart_control_fsm+0xc8>)
 8001106:	f000 fc77 	bl	80019f8 <HAL_GPIO_WritePin>
			setTimer4(1000);
 800110a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110e:	f7ff fcd7 	bl	8000ac0 <setTimer4>
			cmd_flag = WAIT;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <uart_control_fsm+0xc0>)
 8001114:	220a      	movs	r2, #10
 8001116:	701a      	strb	r2, [r3, #0]
			break;
 8001118:	e013      	b.n	8001142 <uart_control_fsm+0xba>
		case WAIT:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2102      	movs	r1, #2
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <uart_control_fsm+0xc8>)
 8001120:	f000 fc6a 	bl	80019f8 <HAL_GPIO_WritePin>
			if (timer4_flag == 1) cmd_flag = INIT_UART;
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <uart_control_fsm+0xcc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d109      	bne.n	8001140 <uart_control_fsm+0xb8>
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <uart_control_fsm+0xc0>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
			break;
 8001132:	e005      	b.n	8001140 <uart_control_fsm+0xb8>
		case isRST:
			cmd_flag = INIT_UART;
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <uart_control_fsm+0xc0>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
			break;
 800113a:	e002      	b.n	8001142 <uart_control_fsm+0xba>
		default:
			break;
 800113c:	bf00      	nop
 800113e:	e000      	b.n	8001142 <uart_control_fsm+0xba>
			break;
 8001140:	bf00      	nop
	}
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000230 	.word	0x20000230
 800114c:	200001a8 	.word	0x200001a8
 8001150:	40010800 	.word	0x40010800
 8001154:	200001b8 	.word	0x200001b8

08001158 <Scan_Addr>:

void Scan_Addr() {
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b098      	sub	sp, #96	; 0x60
 800115c:	af00      	add	r7, sp, #0
    char info[] = "\r\n\r\nScanning I2C bus...\r\n";
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <Scan_Addr+0xb0>)
 8001160:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001164:	461d      	mov	r5, r3
 8001166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800116e:	c403      	stmia	r4!, {r0, r1}
 8001170:	8022      	strh	r2, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8001172:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001176:	4618      	mov	r0, r3
 8001178:	f7fe ffe8 	bl	800014c <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	4820      	ldr	r0, [pc, #128]	; (800120c <Scan_Addr+0xb4>)
 800118a:	f002 fdaa 	bl	8003ce2 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001194:	e02f      	b.n	80011f6 <Scan_Addr+0x9e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8001196:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	b299      	uxth	r1, r3
 800119e:	230a      	movs	r3, #10
 80011a0:	2201      	movs	r2, #1
 80011a2:	481b      	ldr	r0, [pc, #108]	; (8001210 <Scan_Addr+0xb8>)
 80011a4:	f001 f8e2 	bl	800236c <HAL_I2C_IsDeviceReady>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80011ae:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d113      	bne.n	80011de <Scan_Addr+0x86>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80011b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80011ba:	4638      	mov	r0, r7
 80011bc:	4a15      	ldr	r2, [pc, #84]	; (8001214 <Scan_Addr+0xbc>)
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	f003 faac 	bl	800471c <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80011c4:	463b      	mov	r3, r7
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7fe ffc0 	bl	800014c <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4639      	mov	r1, r7
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <Scan_Addr+0xb4>)
 80011d8:	f002 fd83 	bl	8003ce2 <HAL_UART_Transmit>
 80011dc:	e006      	b.n	80011ec <Scan_Addr+0x94>
        } else {
            HAL_UART_Transmit(&huart2, (uint8_t*)".", 1, HAL_MAX_DELAY);
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	2201      	movs	r2, #1
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <Scan_Addr+0xc0>)
 80011e6:	4809      	ldr	r0, [pc, #36]	; (800120c <Scan_Addr+0xb4>)
 80011e8:	f002 fd7b 	bl	8003ce2 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 80011ec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80011f0:	3301      	adds	r3, #1
 80011f2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80011f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80011fa:	2b7f      	cmp	r3, #127	; 0x7f
 80011fc:	d9cb      	bls.n	8001196 <Scan_Addr+0x3e>
        }
    }
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3760      	adds	r7, #96	; 0x60
 8001204:	46bd      	mov	sp, r7
 8001206:	bdb0      	pop	{r4, r5, r7, pc}
 8001208:	0800510c 	.word	0x0800510c
 800120c:	20000158 	.word	0x20000158
 8001210:	200000bc 	.word	0x200000bc
 8001214:	08005100 	.word	0x08005100
 8001218:	08005108 	.word	0x08005108

0800121c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800121e:	490d      	ldr	r1, [pc, #52]	; (8001254 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001234:	4c0a      	ldr	r4, [pc, #40]	; (8001260 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001242:	f7ff fe89 	bl	8000f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f003 fa3d 	bl	80046c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124a:	f7ff fa77 	bl	800073c <main>
  bx lr
 800124e:	4770      	bx	lr
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001254:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001258:	0800518c 	.word	0x0800518c
  ldr r2, =_sbss
 800125c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001260:	20000248 	.word	0x20000248

08001264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC1_2_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_Init+0x28>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_Init+0x28>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f947 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	200f      	movs	r0, #15
 8001280:	f000 f808 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fcfe 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40022000 	.word	0x40022000

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x54>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x58>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f95f 	bl	8001576 <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f000 f927 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <HAL_InitTick+0x5c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000004 	.word	0x20000004

080012f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_IncTick+0x1c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_IncTick+0x20>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a03      	ldr	r2, [pc, #12]	; (8001314 <HAL_IncTick+0x20>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	20000008 	.word	0x20000008
 8001314:	20000234 	.word	0x20000234

08001318 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <HAL_GetTick+0x10>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000234 	.word	0x20000234

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff fff0 	bl	8001318 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d005      	beq.n	8001352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_Delay+0x44>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001352:	bf00      	nop
 8001354:	f7ff ffe0 	bl	8001318 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f7      	bhi.n	8001354 <HAL_Delay+0x28>
  {
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4906      	ldr	r1, [pc, #24]	; (800140c <__NVIC_EnableIRQ+0x34>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	; (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	; (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff90 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff2d 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff42 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff90 	bl	8001464 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5f 	bl	8001410 <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff35 	bl	80013d8 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa2 	bl	80014c8 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d008      	beq.n	80015b6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2204      	movs	r2, #4
 80015a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e020      	b.n	80015f8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 020e 	bic.w	r2, r2, #14
 80015c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0201 	bic.w	r2, r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
	...

08001604 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001616:	2b02      	cmp	r3, #2
 8001618:	d005      	beq.n	8001626 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2204      	movs	r2, #4
 800161e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e051      	b.n	80016ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 020e 	bic.w	r2, r2, #14
 8001634:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <HAL_DMA_Abort_IT+0xd0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d029      	beq.n	80016a4 <HAL_DMA_Abort_IT+0xa0>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a20      	ldr	r2, [pc, #128]	; (80016d8 <HAL_DMA_Abort_IT+0xd4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d022      	beq.n	80016a0 <HAL_DMA_Abort_IT+0x9c>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <HAL_DMA_Abort_IT+0xd8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d01a      	beq.n	800169a <HAL_DMA_Abort_IT+0x96>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1d      	ldr	r2, [pc, #116]	; (80016e0 <HAL_DMA_Abort_IT+0xdc>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d012      	beq.n	8001694 <HAL_DMA_Abort_IT+0x90>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HAL_DMA_Abort_IT+0xe0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d00a      	beq.n	800168e <HAL_DMA_Abort_IT+0x8a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_DMA_Abort_IT+0xe4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d102      	bne.n	8001688 <HAL_DMA_Abort_IT+0x84>
 8001682:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001686:	e00e      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 8001688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800168c:	e00b      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 800168e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001692:	e008      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 8001694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001698:	e005      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 800169a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169e:	e002      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 80016a0:	2310      	movs	r3, #16
 80016a2:	e000      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 80016a4:	2301      	movs	r3, #1
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_DMA_Abort_IT+0xe8>)
 80016a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
    } 
  }
  return status;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40020008 	.word	0x40020008
 80016d8:	4002001c 	.word	0x4002001c
 80016dc:	40020030 	.word	0x40020030
 80016e0:	40020044 	.word	0x40020044
 80016e4:	40020058 	.word	0x40020058
 80016e8:	4002006c 	.word	0x4002006c
 80016ec:	40020000 	.word	0x40020000

080016f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b08b      	sub	sp, #44	; 0x2c
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001702:	e169      	b.n	80019d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001704:	2201      	movs	r2, #1
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	429a      	cmp	r2, r3
 800171e:	f040 8158 	bne.w	80019d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4a9a      	ldr	r2, [pc, #616]	; (8001990 <HAL_GPIO_Init+0x2a0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d05e      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
 800172c:	4a98      	ldr	r2, [pc, #608]	; (8001990 <HAL_GPIO_Init+0x2a0>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d875      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 8001732:	4a98      	ldr	r2, [pc, #608]	; (8001994 <HAL_GPIO_Init+0x2a4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d058      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
 8001738:	4a96      	ldr	r2, [pc, #600]	; (8001994 <HAL_GPIO_Init+0x2a4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d86f      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 800173e:	4a96      	ldr	r2, [pc, #600]	; (8001998 <HAL_GPIO_Init+0x2a8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d052      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
 8001744:	4a94      	ldr	r2, [pc, #592]	; (8001998 <HAL_GPIO_Init+0x2a8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d869      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 800174a:	4a94      	ldr	r2, [pc, #592]	; (800199c <HAL_GPIO_Init+0x2ac>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d04c      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
 8001750:	4a92      	ldr	r2, [pc, #584]	; (800199c <HAL_GPIO_Init+0x2ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d863      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 8001756:	4a92      	ldr	r2, [pc, #584]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d046      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
 800175c:	4a90      	ldr	r2, [pc, #576]	; (80019a0 <HAL_GPIO_Init+0x2b0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d85d      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 8001762:	2b12      	cmp	r3, #18
 8001764:	d82a      	bhi.n	80017bc <HAL_GPIO_Init+0xcc>
 8001766:	2b12      	cmp	r3, #18
 8001768:	d859      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 800176a:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <HAL_GPIO_Init+0x80>)
 800176c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001770:	080017eb 	.word	0x080017eb
 8001774:	080017c5 	.word	0x080017c5
 8001778:	080017d7 	.word	0x080017d7
 800177c:	08001819 	.word	0x08001819
 8001780:	0800181f 	.word	0x0800181f
 8001784:	0800181f 	.word	0x0800181f
 8001788:	0800181f 	.word	0x0800181f
 800178c:	0800181f 	.word	0x0800181f
 8001790:	0800181f 	.word	0x0800181f
 8001794:	0800181f 	.word	0x0800181f
 8001798:	0800181f 	.word	0x0800181f
 800179c:	0800181f 	.word	0x0800181f
 80017a0:	0800181f 	.word	0x0800181f
 80017a4:	0800181f 	.word	0x0800181f
 80017a8:	0800181f 	.word	0x0800181f
 80017ac:	0800181f 	.word	0x0800181f
 80017b0:	0800181f 	.word	0x0800181f
 80017b4:	080017cd 	.word	0x080017cd
 80017b8:	080017e1 	.word	0x080017e1
 80017bc:	4a79      	ldr	r2, [pc, #484]	; (80019a4 <HAL_GPIO_Init+0x2b4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d013      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017c2:	e02c      	b.n	800181e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	623b      	str	r3, [r7, #32]
          break;
 80017ca:	e029      	b.n	8001820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	3304      	adds	r3, #4
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	e024      	b.n	8001820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	3308      	adds	r3, #8
 80017dc:	623b      	str	r3, [r7, #32]
          break;
 80017de:	e01f      	b.n	8001820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	330c      	adds	r3, #12
 80017e6:	623b      	str	r3, [r7, #32]
          break;
 80017e8:	e01a      	b.n	8001820 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017f2:	2304      	movs	r3, #4
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e013      	b.n	8001820 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001800:	2308      	movs	r3, #8
 8001802:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	611a      	str	r2, [r3, #16]
          break;
 800180a:	e009      	b.n	8001820 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800180c:	2308      	movs	r3, #8
 800180e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	615a      	str	r2, [r3, #20]
          break;
 8001816:	e003      	b.n	8001820 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
          break;
 800181c:	e000      	b.n	8001820 <HAL_GPIO_Init+0x130>
          break;
 800181e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2bff      	cmp	r3, #255	; 0xff
 8001824:	d801      	bhi.n	800182a <HAL_GPIO_Init+0x13a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	e001      	b.n	800182e <HAL_GPIO_Init+0x13e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3304      	adds	r3, #4
 800182e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2bff      	cmp	r3, #255	; 0xff
 8001834:	d802      	bhi.n	800183c <HAL_GPIO_Init+0x14c>
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	e002      	b.n	8001842 <HAL_GPIO_Init+0x152>
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	3b08      	subs	r3, #8
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	210f      	movs	r1, #15
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	401a      	ands	r2, r3
 8001854:	6a39      	ldr	r1, [r7, #32]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	431a      	orrs	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 80b1 	beq.w	80019d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001870:	4b4d      	ldr	r3, [pc, #308]	; (80019a8 <HAL_GPIO_Init+0x2b8>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a4c      	ldr	r2, [pc, #304]	; (80019a8 <HAL_GPIO_Init+0x2b8>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <HAL_GPIO_Init+0x2b8>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001888:	4a48      	ldr	r2, [pc, #288]	; (80019ac <HAL_GPIO_Init+0x2bc>)
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	3302      	adds	r3, #2
 8001890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001894:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	220f      	movs	r2, #15
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a40      	ldr	r2, [pc, #256]	; (80019b0 <HAL_GPIO_Init+0x2c0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d013      	beq.n	80018dc <HAL_GPIO_Init+0x1ec>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3f      	ldr	r2, [pc, #252]	; (80019b4 <HAL_GPIO_Init+0x2c4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00d      	beq.n	80018d8 <HAL_GPIO_Init+0x1e8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a3e      	ldr	r2, [pc, #248]	; (80019b8 <HAL_GPIO_Init+0x2c8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d007      	beq.n	80018d4 <HAL_GPIO_Init+0x1e4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a3d      	ldr	r2, [pc, #244]	; (80019bc <HAL_GPIO_Init+0x2cc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d101      	bne.n	80018d0 <HAL_GPIO_Init+0x1e0>
 80018cc:	2303      	movs	r3, #3
 80018ce:	e006      	b.n	80018de <HAL_GPIO_Init+0x1ee>
 80018d0:	2304      	movs	r3, #4
 80018d2:	e004      	b.n	80018de <HAL_GPIO_Init+0x1ee>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e002      	b.n	80018de <HAL_GPIO_Init+0x1ee>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_GPIO_Init+0x1ee>
 80018dc:	2300      	movs	r3, #0
 80018de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e0:	f002 0203 	and.w	r2, r2, #3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4093      	lsls	r3, r2
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ee:	492f      	ldr	r1, [pc, #188]	; (80019ac <HAL_GPIO_Init+0x2bc>)
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	492c      	ldr	r1, [pc, #176]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	43db      	mvns	r3, r3
 800191e:	4928      	ldr	r1, [pc, #160]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 8001920:	4013      	ands	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d006      	beq.n	800193e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001930:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4922      	ldr	r1, [pc, #136]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	43db      	mvns	r3, r3
 8001946:	491e      	ldr	r1, [pc, #120]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 8001948:	4013      	ands	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	4918      	ldr	r1, [pc, #96]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	4914      	ldr	r1, [pc, #80]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 8001970:	4013      	ands	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d021      	beq.n	80019c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	490e      	ldr	r1, [pc, #56]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
 800198c:	e021      	b.n	80019d2 <HAL_GPIO_Init+0x2e2>
 800198e:	bf00      	nop
 8001990:	10320000 	.word	0x10320000
 8001994:	10310000 	.word	0x10310000
 8001998:	10220000 	.word	0x10220000
 800199c:	10210000 	.word	0x10210000
 80019a0:	10120000 	.word	0x10120000
 80019a4:	10110000 	.word	0x10110000
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010000 	.word	0x40010000
 80019b0:	40010800 	.word	0x40010800
 80019b4:	40010c00 	.word	0x40010c00
 80019b8:	40011000 	.word	0x40011000
 80019bc:	40011400 	.word	0x40011400
 80019c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_GPIO_Init+0x304>)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	4909      	ldr	r1, [pc, #36]	; (80019f4 <HAL_GPIO_Init+0x304>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	3301      	adds	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f47f ae8e 	bne.w	8001704 <HAL_GPIO_Init+0x14>
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	372c      	adds	r7, #44	; 0x2c
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	40010400 	.word	0x40010400

080019f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
 8001a04:	4613      	mov	r3, r2
 8001a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a08:	787b      	ldrb	r3, [r7, #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a14:	e003      	b.n	8001a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	041a      	lsls	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	611a      	str	r2, [r3, #16]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e12b      	b.n	8001c92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff f94a 	bl	8000ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2224      	movs	r2, #36	; 0x24
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a8c:	f001 fc9c 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8001a90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4a81      	ldr	r2, [pc, #516]	; (8001c9c <HAL_I2C_Init+0x274>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d807      	bhi.n	8001aac <HAL_I2C_Init+0x84>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4a80      	ldr	r2, [pc, #512]	; (8001ca0 <HAL_I2C_Init+0x278>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	bf94      	ite	ls
 8001aa4:	2301      	movls	r3, #1
 8001aa6:	2300      	movhi	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	e006      	b.n	8001aba <HAL_I2C_Init+0x92>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4a7d      	ldr	r2, [pc, #500]	; (8001ca4 <HAL_I2C_Init+0x27c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	bf94      	ite	ls
 8001ab4:	2301      	movls	r3, #1
 8001ab6:	2300      	movhi	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0e7      	b.n	8001c92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4a78      	ldr	r2, [pc, #480]	; (8001ca8 <HAL_I2C_Init+0x280>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9b      	lsrs	r3, r3, #18
 8001acc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a6a      	ldr	r2, [pc, #424]	; (8001c9c <HAL_I2C_Init+0x274>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d802      	bhi.n	8001afc <HAL_I2C_Init+0xd4>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3301      	adds	r3, #1
 8001afa:	e009      	b.n	8001b10 <HAL_I2C_Init+0xe8>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	4a69      	ldr	r2, [pc, #420]	; (8001cac <HAL_I2C_Init+0x284>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	099b      	lsrs	r3, r3, #6
 8001b0e:	3301      	adds	r3, #1
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	495c      	ldr	r1, [pc, #368]	; (8001c9c <HAL_I2C_Init+0x274>)
 8001b2c:	428b      	cmp	r3, r1
 8001b2e:	d819      	bhi.n	8001b64 <HAL_I2C_Init+0x13c>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1e59      	subs	r1, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b44:	400b      	ands	r3, r1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00a      	beq.n	8001b60 <HAL_I2C_Init+0x138>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1e59      	subs	r1, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5e:	e051      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001b60:	2304      	movs	r3, #4
 8001b62:	e04f      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d111      	bne.n	8001b90 <HAL_I2C_Init+0x168>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	440b      	add	r3, r1
 8001b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	e012      	b.n	8001bb6 <HAL_I2C_Init+0x18e>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1e58      	subs	r0, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	0099      	lsls	r1, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Init+0x196>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e022      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10e      	bne.n	8001be4 <HAL_I2C_Init+0x1bc>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1e58      	subs	r0, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	440b      	add	r3, r1
 8001bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	e00f      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e58      	subs	r0, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	0099      	lsls	r1, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	6809      	ldr	r1, [r1, #0]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6911      	ldr	r1, [r2, #16]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68d2      	ldr	r2, [r2, #12]
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	000186a0 	.word	0x000186a0
 8001ca0:	001e847f 	.word	0x001e847f
 8001ca4:	003d08ff 	.word	0x003d08ff
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	10624dd3 	.word	0x10624dd3

08001cb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	817b      	strh	r3, [r7, #10]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cc4:	f7ff fb28 	bl	8001318 <HAL_GetTick>
 8001cc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	f040 80e0 	bne.w	8001e98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2319      	movs	r3, #25
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4970      	ldr	r1, [pc, #448]	; (8001ea4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fdc0 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e0d3      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_I2C_Master_Transmit+0x50>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e0cc      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d007      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2221      	movs	r2, #33	; 0x21
 8001d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2210      	movs	r2, #16
 8001d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	893a      	ldrh	r2, [r7, #8]
 8001d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4a50      	ldr	r2, [pc, #320]	; (8001ea8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d68:	8979      	ldrh	r1, [r7, #10]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	6a3a      	ldr	r2, [r7, #32]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 fc2a 	bl	80025c8 <I2C_MasterRequestWrite>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e08d      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d94:	e066      	b.n	8001e64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	6a39      	ldr	r1, [r7, #32]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fe3a 	bl	8002a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00d      	beq.n	8001dc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d107      	bne.n	8001dbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e06b      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d11b      	bne.n	8001e38 <HAL_I2C_Master_Transmit+0x188>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d017      	beq.n	8001e38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	6a39      	ldr	r1, [r7, #32]
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 fe2a 	bl	8002a96 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00d      	beq.n	8001e64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d107      	bne.n	8001e60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e01a      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d194      	bne.n	8001d96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e000      	b.n	8001e9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e98:	2302      	movs	r3, #2
  }
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	00100002 	.word	0x00100002
 8001ea8:	ffff0000 	.word	0xffff0000

08001eac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	460b      	mov	r3, r1
 8001eba:	817b      	strh	r3, [r7, #10]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff fa28 	bl	8001318 <HAL_GetTick>
 8001ec8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	f040 823f 	bne.w	8002356 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2319      	movs	r3, #25
 8001ede:	2201      	movs	r2, #1
 8001ee0:	497f      	ldr	r1, [pc, #508]	; (80020e0 <HAL_I2C_Master_Receive+0x234>)
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fcc0 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e232      	b.n	8002358 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_I2C_Master_Receive+0x54>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e22b      	b.n	8002358 <HAL_I2C_Master_Receive+0x4ac>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d007      	beq.n	8001f26 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0201 	orr.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2222      	movs	r2, #34	; 0x22
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2210      	movs	r2, #16
 8001f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	893a      	ldrh	r2, [r7, #8]
 8001f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4a5f      	ldr	r2, [pc, #380]	; (80020e4 <HAL_I2C_Master_Receive+0x238>)
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f68:	8979      	ldrh	r1, [r7, #10]
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fbac 	bl	80026cc <I2C_MasterRequestRead>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1ec      	b.n	8002358 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d113      	bne.n	8001fae <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e1c0      	b.n	8002330 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d11e      	bne.n	8001ff4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc6:	b672      	cpsid	i
}
 8001fc8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ff0:	b662      	cpsie	i
}
 8001ff2:	e035      	b.n	8002060 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d11e      	bne.n	800203a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800200a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002034:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002036:	b662      	cpsie	i
}
 8002038:	e012      	b.n	8002060 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002060:	e166      	b.n	8002330 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	2b03      	cmp	r3, #3
 8002068:	f200 811f 	bhi.w	80022aa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	2b01      	cmp	r3, #1
 8002072:	d123      	bne.n	80020bc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002076:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 fd4d 	bl	8002b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e167      	b.n	8002358 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ba:	e139      	b.n	8002330 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d152      	bne.n	800216a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	2200      	movs	r2, #0
 80020cc:	4906      	ldr	r1, [pc, #24]	; (80020e8 <HAL_I2C_Master_Receive+0x23c>)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fbca 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e13c      	b.n	8002358 <HAL_I2C_Master_Receive+0x4ac>
 80020de:	bf00      	nop
 80020e0:	00100002 	.word	0x00100002
 80020e4:	ffff0000 	.word	0xffff0000
 80020e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80020ec:	b672      	cpsid	i
}
 80020ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002132:	b662      	cpsie	i
}
 8002134:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002168:	e0e2      	b.n	8002330 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	2200      	movs	r2, #0
 8002172:	497b      	ldr	r1, [pc, #492]	; (8002360 <HAL_I2C_Master_Receive+0x4b4>)
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fb77 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0e9      	b.n	8002358 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002192:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002194:	b672      	cpsid	i
}
 8002196:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80021ca:	4b66      	ldr	r3, [pc, #408]	; (8002364 <HAL_I2C_Master_Receive+0x4b8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	4a65      	ldr	r2, [pc, #404]	; (8002368 <HAL_I2C_Master_Receive+0x4bc>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0a1a      	lsrs	r2, r3, #8
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	00da      	lsls	r2, r3, #3
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d118      	bne.n	8002222 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f043 0220 	orr.w	r2, r3, #32
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002212:	b662      	cpsie	i
}
 8002214:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e09a      	b.n	8002358 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b04      	cmp	r3, #4
 800222e:	d1d9      	bne.n	80021e4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002272:	b662      	cpsie	i
}
 8002274:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022a8:	e042      	b.n	8002330 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fc32 	bl	8002b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e04c      	b.n	8002358 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d118      	bne.n	8002330 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	f47f ae94 	bne.w	8002062 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
  }
}
 8002358:	4618      	mov	r0, r3
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	00010004 	.word	0x00010004
 8002364:	20000000 	.word	0x20000000
 8002368:	14f8b589 	.word	0x14f8b589

0800236c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	460b      	mov	r3, r1
 800237a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7fe ffcc 	bl	8001318 <HAL_GetTick>
 8002380:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002382:	2301      	movs	r3, #1
 8002384:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b20      	cmp	r3, #32
 8002390:	f040 8111 	bne.w	80025b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2319      	movs	r3, #25
 800239a:	2201      	movs	r2, #1
 800239c:	4988      	ldr	r1, [pc, #544]	; (80025c0 <HAL_I2C_IsDeviceReady+0x254>)
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fa62 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
 80023ac:	e104      	b.n	80025b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_I2C_IsDeviceReady+0x50>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e0fd      	b.n	80025b8 <HAL_I2C_IsDeviceReady+0x24c>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d007      	beq.n	80023e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2224      	movs	r2, #36	; 0x24
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a70      	ldr	r2, [pc, #448]	; (80025c4 <HAL_I2C_IsDeviceReady+0x258>)
 8002404:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002414:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fa20 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00d      	beq.n	800244a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243c:	d103      	bne.n	8002446 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0b6      	b.n	80025b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800244a:	897b      	ldrh	r3, [r7, #10]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002458:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800245a:	f7fe ff5d 	bl	8001318 <HAL_GetTick>
 800245e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	bf0c      	ite	eq
 800246e:	2301      	moveq	r3, #1
 8002470:	2300      	movne	r3, #0
 8002472:	b2db      	uxtb	r3, r3
 8002474:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002484:	bf0c      	ite	eq
 8002486:	2301      	moveq	r3, #1
 8002488:	2300      	movne	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800248e:	e025      	b.n	80024dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002490:	f7fe ff42 	bl	8001318 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d302      	bcc.n	80024a6 <HAL_I2C_IsDeviceReady+0x13a>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	22a0      	movs	r2, #160	; 0xa0
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2ba0      	cmp	r3, #160	; 0xa0
 80024e6:	d005      	beq.n	80024f4 <HAL_I2C_IsDeviceReady+0x188>
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_I2C_IsDeviceReady+0x188>
 80024ee:	7dbb      	ldrb	r3, [r7, #22]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0cd      	beq.n	8002490 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b02      	cmp	r3, #2
 8002508:	d129      	bne.n	800255e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002518:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2319      	movs	r3, #25
 8002536:	2201      	movs	r2, #1
 8002538:	4921      	ldr	r1, [pc, #132]	; (80025c0 <HAL_I2C_IsDeviceReady+0x254>)
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f994 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e036      	b.n	80025b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e02c      	b.n	80025b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002576:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2319      	movs	r3, #25
 800257e:	2201      	movs	r2, #1
 8002580:	490f      	ldr	r1, [pc, #60]	; (80025c0 <HAL_I2C_IsDeviceReady+0x254>)
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f970 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e012      	b.n	80025b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	3301      	adds	r3, #1
 8002596:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	429a      	cmp	r2, r3
 800259e:	f4ff af32 	bcc.w	8002406 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
  }
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	00100002 	.word	0x00100002
 80025c4:	ffff0000 	.word	0xffff0000

080025c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	460b      	mov	r3, r1
 80025d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d006      	beq.n	80025f2 <I2C_MasterRequestWrite+0x2a>
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d003      	beq.n	80025f2 <I2C_MasterRequestWrite+0x2a>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f0:	d108      	bne.n	8002604 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e00b      	b.n	800261c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	2b12      	cmp	r3, #18
 800260a:	d107      	bne.n	800261c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f91d 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002642:	d103      	bne.n	800264c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e035      	b.n	80026bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002658:	d108      	bne.n	800266c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002668:	611a      	str	r2, [r3, #16]
 800266a:	e01b      	b.n	80026a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800266c:	897b      	ldrh	r3, [r7, #10]
 800266e:	11db      	asrs	r3, r3, #7
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f003 0306 	and.w	r3, r3, #6
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f063 030f 	orn	r3, r3, #15
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	490e      	ldr	r1, [pc, #56]	; (80026c4 <I2C_MasterRequestWrite+0xfc>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f943 	bl	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e010      	b.n	80026bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800269a:	897b      	ldrh	r3, [r7, #10]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4907      	ldr	r1, [pc, #28]	; (80026c8 <I2C_MasterRequestWrite+0x100>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f933 	bl	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	00010008 	.word	0x00010008
 80026c8:	00010002 	.word	0x00010002

080026cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	460b      	mov	r3, r1
 80026da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d006      	beq.n	8002706 <I2C_MasterRequestRead+0x3a>
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d003      	beq.n	8002706 <I2C_MasterRequestRead+0x3a>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002704:	d108      	bne.n	8002718 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e00b      	b.n	8002730 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	2b11      	cmp	r3, #17
 800271e:	d107      	bne.n	8002730 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800272e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f893 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002756:	d103      	bne.n	8002760 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e079      	b.n	8002858 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800276c:	d108      	bne.n	8002780 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800276e:	897b      	ldrh	r3, [r7, #10]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	611a      	str	r2, [r3, #16]
 800277e:	e05f      	b.n	8002840 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002780:	897b      	ldrh	r3, [r7, #10]
 8002782:	11db      	asrs	r3, r3, #7
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f003 0306 	and.w	r3, r3, #6
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f063 030f 	orn	r3, r3, #15
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4930      	ldr	r1, [pc, #192]	; (8002860 <I2C_MasterRequestRead+0x194>)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f8b9 	bl	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e054      	b.n	8002858 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ae:	897b      	ldrh	r3, [r7, #10]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4929      	ldr	r1, [pc, #164]	; (8002864 <I2C_MasterRequestRead+0x198>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f8a9 	bl	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e044      	b.n	8002858 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f831 	bl	8002868 <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00d      	beq.n	8002828 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281a:	d103      	bne.n	8002824 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e017      	b.n	8002858 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002828:	897b      	ldrh	r3, [r7, #10]
 800282a:	11db      	asrs	r3, r3, #7
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f003 0306 	and.w	r3, r3, #6
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f063 030e 	orn	r3, r3, #14
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4907      	ldr	r1, [pc, #28]	; (8002864 <I2C_MasterRequestRead+0x198>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f865 	bl	8002916 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	00010008 	.word	0x00010008
 8002864:	00010002 	.word	0x00010002

08002868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002878:	e025      	b.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d021      	beq.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002882:	f7fe fd49 	bl	8001318 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d302      	bcc.n	8002898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d116      	bne.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f043 0220 	orr.w	r2, r3, #32
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e023      	b.n	800290e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10d      	bne.n	80028ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	e00c      	b.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4013      	ands	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf0c      	ite	eq
 80028fe:	2301      	moveq	r3, #1
 8002900:	2300      	movne	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	429a      	cmp	r2, r3
 800290a:	d0b6      	beq.n	800287a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002924:	e051      	b.n	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002934:	d123      	bne.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002944:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800294e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f043 0204 	orr.w	r2, r3, #4
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e046      	b.n	8002a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d021      	beq.n	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002986:	f7fe fcc7 	bl	8001318 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0220 	orr.w	r2, r3, #32
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e020      	b.n	8002a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d10c      	bne.n	80029ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bf14      	ite	ne
 80029e6:	2301      	movne	r3, #1
 80029e8:	2300      	moveq	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	e00b      	b.n	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	43da      	mvns	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4013      	ands	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf14      	ite	ne
 8002a00:	2301      	movne	r3, #1
 8002a02:	2300      	moveq	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d18d      	bne.n	8002926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a20:	e02d      	b.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f8ce 	bl	8002bc4 <I2C_IsAcknowledgeFailed>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e02d      	b.n	8002a8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d021      	beq.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7fe fc6d 	bl	8001318 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d116      	bne.n	8002a7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e007      	b.n	8002a8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b80      	cmp	r3, #128	; 0x80
 8002a8a:	d1ca      	bne.n	8002a22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aa2:	e02d      	b.n	8002b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f88d 	bl	8002bc4 <I2C_IsAcknowledgeFailed>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e02d      	b.n	8002b10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d021      	beq.n	8002b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abc:	f7fe fc2c 	bl	8001318 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d302      	bcc.n	8002ad2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d116      	bne.n	8002b00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f043 0220 	orr.w	r2, r3, #32
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e007      	b.n	8002b10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d1ca      	bne.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b24:	e042      	b.n	8002bac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d119      	bne.n	8002b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0210 	mvn.w	r2, #16
 8002b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e029      	b.n	8002bbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b68:	f7fe fbd6 	bl	8001318 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d302      	bcc.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d1b5      	bne.n	8002b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bda:	d11b      	bne.n	8002c14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002be4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0204 	orr.w	r2, r3, #4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e272      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8087 	beq.w	8002d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c40:	4b92      	ldr	r3, [pc, #584]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d00c      	beq.n	8002c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c4c:	4b8f      	ldr	r3, [pc, #572]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d112      	bne.n	8002c7e <HAL_RCC_OscConfig+0x5e>
 8002c58:	4b8c      	ldr	r3, [pc, #560]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d10b      	bne.n	8002c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c66:	4b89      	ldr	r3, [pc, #548]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d06c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x12c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d168      	bne.n	8002d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e24c      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x76>
 8002c88:	4b80      	ldr	r3, [pc, #512]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a7f      	ldr	r2, [pc, #508]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e02e      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x98>
 8002c9e:	4b7b      	ldr	r3, [pc, #492]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7a      	ldr	r2, [pc, #488]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b78      	ldr	r3, [pc, #480]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a77      	ldr	r2, [pc, #476]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e01d      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0xbc>
 8002cc2:	4b72      	ldr	r3, [pc, #456]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a71      	ldr	r2, [pc, #452]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b6f      	ldr	r3, [pc, #444]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6e      	ldr	r2, [pc, #440]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002cdc:	4b6b      	ldr	r3, [pc, #428]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6a      	ldr	r2, [pc, #424]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a67      	ldr	r2, [pc, #412]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fb0c 	bl	8001318 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe fb08 	bl	8001318 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e200      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0xe4>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe faf8 	bl	8001318 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe faf4 	bl	8001318 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1ec      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	4b53      	ldr	r3, [pc, #332]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x10c>
 8002d4a:	e000      	b.n	8002d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d063      	beq.n	8002e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d5a:	4b4c      	ldr	r3, [pc, #304]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d66:	4b49      	ldr	r3, [pc, #292]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d11c      	bne.n	8002dac <HAL_RCC_OscConfig+0x18c>
 8002d72:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d116      	bne.n	8002dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	4b43      	ldr	r3, [pc, #268]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x176>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1c0      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4939      	ldr	r1, [pc, #228]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	e03a      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fe faad 	bl	8001318 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe faa9 	bl	8001318 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1a1      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4927      	ldr	r1, [pc, #156]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fa8c 	bl	8001318 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fe fa88 	bl	8001318 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e180      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d03a      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d019      	beq.n	8002e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e36:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fa6c 	bl	8001318 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fe fa68 	bl	8001318 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e160      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e62:	2001      	movs	r0, #1
 8002e64:	f000 fad8 	bl	8003418 <RCC_Delay>
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e70:	f7fe fa52 	bl	8001318 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e76:	e00f      	b.n	8002e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fe fa4e 	bl	8001318 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d908      	bls.n	8002e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e146      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	42420000 	.word	0x42420000
 8002e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e9      	bne.n	8002e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a6 	beq.w	8002ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b8b      	ldr	r3, [pc, #556]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10d      	bne.n	8002ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4b88      	ldr	r3, [pc, #544]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	4a87      	ldr	r2, [pc, #540]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	61d3      	str	r3, [r2, #28]
 8002ece:	4b85      	ldr	r3, [pc, #532]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ede:	4b82      	ldr	r3, [pc, #520]	; (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d118      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eea:	4b7f      	ldr	r3, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7e      	ldr	r2, [pc, #504]	; (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fa0f 	bl	8001318 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efe:	f7fe fa0b 	bl	8001318 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	; 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e103      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	4b75      	ldr	r3, [pc, #468]	; (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x312>
 8002f24:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	e02d      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x334>
 8002f3a:	4b6a      	ldr	r3, [pc, #424]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a69      	ldr	r2, [pc, #420]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	4b67      	ldr	r3, [pc, #412]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a66      	ldr	r2, [pc, #408]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6213      	str	r3, [r2, #32]
 8002f52:	e01c      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCC_OscConfig+0x356>
 8002f5c:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a60      	ldr	r2, [pc, #384]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	4b5e      	ldr	r3, [pc, #376]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a5d      	ldr	r2, [pc, #372]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6213      	str	r3, [r2, #32]
 8002f74:	e00b      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f76:	4b5b      	ldr	r3, [pc, #364]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a5a      	ldr	r2, [pc, #360]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6213      	str	r3, [r2, #32]
 8002f82:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d015      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe f9bf 	bl	8001318 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe f9bb 	bl	8001318 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0b1      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	4b4b      	ldr	r3, [pc, #300]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ee      	beq.n	8002f9e <HAL_RCC_OscConfig+0x37e>
 8002fc0:	e014      	b.n	8002fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe f9a9 	bl	8001318 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe f9a5 	bl	8001318 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e09b      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ee      	bne.n	8002fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b3c      	ldr	r3, [pc, #240]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4a3b      	ldr	r2, [pc, #236]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8087 	beq.w	8003116 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003008:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d061      	beq.n	80030d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d146      	bne.n	80030aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301c:	4b33      	ldr	r3, [pc, #204]	; (80030ec <HAL_RCC_OscConfig+0x4cc>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe f979 	bl	8001318 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302a:	f7fe f975 	bl	8001318 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e06d      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303c:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f0      	bne.n	800302a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003050:	d108      	bne.n	8003064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4921      	ldr	r1, [pc, #132]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a19      	ldr	r1, [r3, #32]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	430b      	orrs	r3, r1
 8003076:	491b      	ldr	r1, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_OscConfig+0x4cc>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7fe f949 	bl	8001318 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308a:	f7fe f945 	bl	8001318 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e03d      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x46a>
 80030a8:	e035      	b.n	8003116 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <HAL_RCC_OscConfig+0x4cc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe f932 	bl	8001318 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fe f92e 	bl	8001318 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e026      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x498>
 80030d6:	e01e      	b.n	8003116 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e019      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40007000 	.word	0x40007000
 80030ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_OscConfig+0x500>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	429a      	cmp	r2, r3
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0d0      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d910      	bls.n	8003168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b67      	ldr	r3, [pc, #412]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 0207 	bic.w	r2, r3, #7
 800314e:	4965      	ldr	r1, [pc, #404]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b63      	ldr	r3, [pc, #396]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b8      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003180:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800318a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003198:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	494d      	ldr	r1, [pc, #308]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d040      	beq.n	8003244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d115      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07f      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e073      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06b      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4936      	ldr	r1, [pc, #216]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003214:	f7fe f880 	bl	8001318 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	e00a      	b.n	8003232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321c:	f7fe f87c 	bl	8001318 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e053      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1eb      	bne.n	800321c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d210      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 0207 	bic.w	r2, r3, #7
 800325a:	4922      	ldr	r1, [pc, #136]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e032      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4916      	ldr	r1, [pc, #88]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	490e      	ldr	r1, [pc, #56]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032b2:	f000 f821 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	490a      	ldr	r1, [pc, #40]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032c4:	5ccb      	ldrb	r3, [r1, r3]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1cc>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1d0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd ffde 	bl	8001294 <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08005138 	.word	0x08005138
 80032f0:	20000000 	.word	0x20000000
 80032f4:	20000004 	.word	0x20000004

080032f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b490      	push	{r4, r7}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032fe:	4b29      	ldr	r3, [pc, #164]	; (80033a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003300:	1d3c      	adds	r4, r7, #4
 8003302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003308:	f240 2301 	movw	r3, #513	; 0x201
 800330c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d002      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x40>
 8003332:	2b08      	cmp	r3, #8
 8003334:	d003      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x46>
 8003336:	e02b      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003338:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800333a:	623b      	str	r3, [r7, #32]
      break;
 800333c:	e02b      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	0c9b      	lsrs	r3, r3, #18
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	3328      	adds	r3, #40	; 0x28
 8003348:	443b      	add	r3, r7
 800334a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800334e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d012      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800335a:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0c5b      	lsrs	r3, r3, #17
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	3328      	adds	r3, #40	; 0x28
 8003366:	443b      	add	r3, r7
 8003368:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800336c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003372:	fb03 f202 	mul.w	r2, r3, r2
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
 800337e:	e004      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	4a0b      	ldr	r2, [pc, #44]	; (80033b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003384:	fb02 f303 	mul.w	r3, r2, r3
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	623b      	str	r3, [r7, #32]
      break;
 800338e:	e002      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003392:	623b      	str	r3, [r7, #32]
      break;
 8003394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003396:	6a3b      	ldr	r3, [r7, #32]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3728      	adds	r7, #40	; 0x28
 800339c:	46bd      	mov	sp, r7
 800339e:	bc90      	pop	{r4, r7}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	08005128 	.word	0x08005128
 80033a8:	40021000 	.word	0x40021000
 80033ac:	007a1200 	.word	0x007a1200
 80033b0:	003d0900 	.word	0x003d0900

080033b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b8:	4b02      	ldr	r3, [pc, #8]	; (80033c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	20000000 	.word	0x20000000

080033c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033cc:	f7ff fff2 	bl	80033b4 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	; (80033ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	08005148 	.word	0x08005148

080033f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033f4:	f7ff ffde 	bl	80033b4 <HAL_RCC_GetHCLKFreq>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	0adb      	lsrs	r3, r3, #11
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4903      	ldr	r1, [pc, #12]	; (8003414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003406:	5ccb      	ldrb	r3, [r1, r3]
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000
 8003414:	08005148 	.word	0x08005148

08003418 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <RCC_Delay+0x34>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <RCC_Delay+0x38>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	0a5b      	lsrs	r3, r3, #9
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	fb02 f303 	mul.w	r3, r2, r3
 8003432:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003434:	bf00      	nop
  }
  while (Delay --);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1e5a      	subs	r2, r3, #1
 800343a:	60fa      	str	r2, [r7, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f9      	bne.n	8003434 <RCC_Delay+0x1c>
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	20000000 	.word	0x20000000
 8003450:	10624dd3 	.word	0x10624dd3

08003454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e041      	b.n	80034ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fc84 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f000 fa70 	bl	8003978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d001      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e03a      	b.n	8003582 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a18      	ldr	r2, [pc, #96]	; (800358c <HAL_TIM_Base_Start_IT+0x98>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00e      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x58>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003536:	d009      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x58>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_TIM_Base_Start_IT+0x9c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x58>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a13      	ldr	r2, [pc, #76]	; (8003594 <HAL_TIM_Base_Start_IT+0xa0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d111      	bne.n	8003570 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b06      	cmp	r3, #6
 800355c:	d010      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	e007      	b.n	8003580 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40000400 	.word	0x40000400
 8003594:	40000800 	.word	0x40000800

08003598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d122      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d11b      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0202 	mvn.w	r2, #2
 80035c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9b1 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f9a4 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f9b3 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d122      	bne.n	8003648 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b04      	cmp	r3, #4
 800360e:	d11b      	bne.n	8003648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0204 	mvn.w	r2, #4
 8003618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f987 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 8003634:	e005      	b.n	8003642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f97a 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f989 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b08      	cmp	r3, #8
 8003654:	d122      	bne.n	800369c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b08      	cmp	r3, #8
 8003662:	d11b      	bne.n	800369c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0208 	mvn.w	r2, #8
 800366c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2204      	movs	r2, #4
 8003672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f95d 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 8003688:	e005      	b.n	8003696 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f950 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f95f 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b10      	cmp	r3, #16
 80036a8:	d122      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0210 	mvn.w	r2, #16
 80036c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2208      	movs	r2, #8
 80036c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f933 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f926 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f935 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10e      	bne.n	800371c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0201 	mvn.w	r2, #1
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd f986 	bl	8000a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b80      	cmp	r3, #128	; 0x80
 8003728:	d10e      	bne.n	8003748 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b80      	cmp	r3, #128	; 0x80
 8003736:	d107      	bne.n	8003748 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fa77 	bl	8003c36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b40      	cmp	r3, #64	; 0x40
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8f9 	bl	8003966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b20      	cmp	r3, #32
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b20      	cmp	r3, #32
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0220 	mvn.w	r2, #32
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa42 	bl	8003c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIM_ConfigClockSource+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e0b3      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x180>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f8:	d03e      	beq.n	8003878 <HAL_TIM_ConfigClockSource+0xd0>
 80037fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fe:	f200 8087 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	f000 8085 	beq.w	8003914 <HAL_TIM_ConfigClockSource+0x16c>
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380e:	d87f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003810:	2b70      	cmp	r3, #112	; 0x70
 8003812:	d01a      	beq.n	800384a <HAL_TIM_ConfigClockSource+0xa2>
 8003814:	2b70      	cmp	r3, #112	; 0x70
 8003816:	d87b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003818:	2b60      	cmp	r3, #96	; 0x60
 800381a:	d050      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x116>
 800381c:	2b60      	cmp	r3, #96	; 0x60
 800381e:	d877      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003820:	2b50      	cmp	r3, #80	; 0x50
 8003822:	d03c      	beq.n	800389e <HAL_TIM_ConfigClockSource+0xf6>
 8003824:	2b50      	cmp	r3, #80	; 0x50
 8003826:	d873      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d058      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x136>
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d86f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003830:	2b30      	cmp	r3, #48	; 0x30
 8003832:	d064      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x156>
 8003834:	2b30      	cmp	r3, #48	; 0x30
 8003836:	d86b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003838:	2b20      	cmp	r3, #32
 800383a:	d060      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x156>
 800383c:	2b20      	cmp	r3, #32
 800383e:	d867      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d05c      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x156>
 8003844:	2b10      	cmp	r3, #16
 8003846:	d05a      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003848:	e062      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6899      	ldr	r1, [r3, #8]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f000 f966 	bl	8003b2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800386c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	609a      	str	r2, [r3, #8]
      break;
 8003876:	e04e      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f000 f94f 	bl	8003b2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389a:	609a      	str	r2, [r3, #8]
      break;
 800389c:	e03b      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f000 f8c6 	bl	8003a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2150      	movs	r1, #80	; 0x50
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f91d 	bl	8003af6 <TIM_ITRx_SetConfig>
      break;
 80038bc:	e02b      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 f8e4 	bl	8003a98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2160      	movs	r1, #96	; 0x60
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f90d 	bl	8003af6 <TIM_ITRx_SetConfig>
      break;
 80038dc:	e01b      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f000 f8a6 	bl	8003a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2140      	movs	r1, #64	; 0x40
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f8fd 	bl	8003af6 <TIM_ITRx_SetConfig>
      break;
 80038fc:	e00b      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f000 f8f4 	bl	8003af6 <TIM_ITRx_SetConfig>
        break;
 800390e:	e002      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003914:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a29      	ldr	r2, [pc, #164]	; (8003a30 <TIM_Base_SetConfig+0xb8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00b      	beq.n	80039a8 <TIM_Base_SetConfig+0x30>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003996:	d007      	beq.n	80039a8 <TIM_Base_SetConfig+0x30>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a26      	ldr	r2, [pc, #152]	; (8003a34 <TIM_Base_SetConfig+0xbc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0x30>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a25      	ldr	r2, [pc, #148]	; (8003a38 <TIM_Base_SetConfig+0xc0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d108      	bne.n	80039ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <TIM_Base_SetConfig+0xb8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00b      	beq.n	80039da <TIM_Base_SetConfig+0x62>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c8:	d007      	beq.n	80039da <TIM_Base_SetConfig+0x62>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <TIM_Base_SetConfig+0xbc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_Base_SetConfig+0x62>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <TIM_Base_SetConfig+0xc0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d108      	bne.n	80039ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <TIM_Base_SetConfig+0xb8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d103      	bne.n	8003a20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	615a      	str	r2, [r3, #20]
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800

08003a3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f023 0201 	bic.w	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f023 030a 	bic.w	r3, r3, #10
 8003a78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f023 0210 	bic.w	r2, r3, #16
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ac2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	031b      	lsls	r3, r3, #12
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ad4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	621a      	str	r2, [r3, #32]
}
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b085      	sub	sp, #20
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f043 0307 	orr.w	r3, r3, #7
 8003b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	609a      	str	r2, [r3, #8]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b087      	sub	sp, #28
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	021a      	lsls	r2, r3, #8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	609a      	str	r2, [r3, #8]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e046      	b.n	8003c0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00e      	beq.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bcc:	d009      	beq.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a12      	ldr	r2, [pc, #72]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a10      	ldr	r2, [pc, #64]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10c      	bne.n	8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800

08003c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e03f      	b.n	8003cda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd f8ae 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fc85 	bl	800459c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b08a      	sub	sp, #40	; 0x28
 8003ce6:	af02      	add	r7, sp, #8
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d17c      	bne.n	8003dfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_UART_Transmit+0x2c>
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e075      	b.n	8003dfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Transmit+0x3e>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e06e      	b.n	8003dfe <HAL_UART_Transmit+0x11c>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2221      	movs	r2, #33	; 0x21
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d36:	f7fd faef 	bl	8001318 <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d108      	bne.n	8003d64 <HAL_UART_Transmit+0x82>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e003      	b.n	8003d6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d74:	e02a      	b.n	8003dcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fa38 	bl	80041f6 <UART_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e036      	b.n	8003dfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	3302      	adds	r3, #2
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	e007      	b.n	8003dbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	781a      	ldrb	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1cf      	bne.n	8003d76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2140      	movs	r1, #64	; 0x40
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fa08 	bl	80041f6 <UART_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e006      	b.n	8003dfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d11d      	bne.n	8003e5c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Receive_IT+0x26>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e016      	b.n	8003e5e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Receive_IT+0x38>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e00f      	b.n	8003e5e <HAL_UART_Receive_IT+0x58>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fa19 	bl	800428a <UART_Start_Receive_IT>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	e000      	b.n	8003e5e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10d      	bne.n	8003eba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_UART_IRQHandler+0x52>
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fac9 	bl	800444a <UART_Receive_IT>
      return;
 8003eb8:	e17b      	b.n	80041b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80b1 	beq.w	8004024 <HAL_UART_IRQHandler+0x1bc>
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x70>
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80a6 	beq.w	8004024 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x90>
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	f043 0201 	orr.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_UART_IRQHandler+0xb0>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f043 0202 	orr.w	r2, r3, #2
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_UART_IRQHandler+0xd0>
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f043 0204 	orr.w	r2, r3, #4
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00f      	beq.n	8003f62 <HAL_UART_IRQHandler+0xfa>
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <HAL_UART_IRQHandler+0xee>
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f043 0208 	orr.w	r2, r3, #8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 811e 	beq.w	80041a8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <HAL_UART_IRQHandler+0x11e>
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fa62 	bl	800444a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <HAL_UART_IRQHandler+0x146>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d031      	beq.n	8004012 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f9a4 	bl	80042fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d023      	beq.n	800400a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d013      	beq.n	8004002 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	4a76      	ldr	r2, [pc, #472]	; (80041b8 <HAL_UART_IRQHandler+0x350>)
 8003fe0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd fb0c 	bl	8001604 <HAL_DMA_Abort_IT>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	e00e      	b.n	8004020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f8e3 	bl	80041ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	e00a      	b.n	8004020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8df 	bl	80041ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	e006      	b.n	8004020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8db 	bl	80041ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800401e:	e0c3      	b.n	80041a8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004020:	bf00      	nop
    return;
 8004022:	e0c1      	b.n	80041a8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	2b01      	cmp	r3, #1
 800402a:	f040 80a1 	bne.w	8004170 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 809b 	beq.w	8004170 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8095 	beq.w	8004170 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d04e      	beq.n	8004108 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004074:	8a3b      	ldrh	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8098 	beq.w	80041ac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004080:	8a3a      	ldrh	r2, [r7, #16]
 8004082:	429a      	cmp	r2, r3
 8004084:	f080 8092 	bcs.w	80041ac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8a3a      	ldrh	r2, [r7, #16]
 800408c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b20      	cmp	r3, #32
 8004096:	d02b      	beq.n	80040f0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040a6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0210 	bic.w	r2, r2, #16
 80040e4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fd fa4f 	bl	800158e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4619      	mov	r1, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f86d 	bl	80041e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004106:	e051      	b.n	80041ac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004110:	b29b      	uxth	r3, r3
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d047      	beq.n	80041b0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004120:	8a7b      	ldrh	r3, [r7, #18]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d044      	beq.n	80041b0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004134:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0210 	bic.w	r2, r2, #16
 8004162:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004164:	8a7b      	ldrh	r3, [r7, #18]
 8004166:	4619      	mov	r1, r3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f839 	bl	80041e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800416e:	e01f      	b.n	80041b0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_UART_IRQHandler+0x324>
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f8f9 	bl	800437c <UART_Transmit_IT>
    return;
 800418a:	e012      	b.n	80041b2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <HAL_UART_IRQHandler+0x34a>
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f93a 	bl	800441a <UART_EndTransmit_IT>
    return;
 80041a6:	e004      	b.n	80041b2 <HAL_UART_IRQHandler+0x34a>
    return;
 80041a8:	bf00      	nop
 80041aa:	e002      	b.n	80041b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80041b0:	bf00      	nop
  }
}
 80041b2:	3728      	adds	r7, #40	; 0x28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	08004355 	.word	0x08004355

080041bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	603b      	str	r3, [r7, #0]
 8004202:	4613      	mov	r3, r2
 8004204:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004206:	e02c      	b.n	8004262 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d028      	beq.n	8004262 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0x30>
 8004216:	f7fd f87f 	bl	8001318 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	429a      	cmp	r2, r3
 8004224:	d21d      	bcs.n	8004262 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004234:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e00f      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	429a      	cmp	r2, r3
 800427e:	d0c3      	beq.n	8004208 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800428a:	b480      	push	{r7}
 800428c:	b085      	sub	sp, #20
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	4613      	mov	r3, r2
 8004296:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	88fa      	ldrh	r2, [r7, #6]
 80042a2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2222      	movs	r2, #34	; 0x22
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ce:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0220 	orr.w	r2, r2, #32
 80042ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004312:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	2b01      	cmp	r3, #1
 800432a:	d107      	bne.n	800433c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0210 	bic.w	r2, r2, #16
 800433a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff ff2d 	bl	80041ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b21      	cmp	r3, #33	; 0x21
 800438e:	d13e      	bne.n	800440e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004398:	d114      	bne.n	80043c4 <UART_Transmit_IT+0x48>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d110      	bne.n	80043c4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	1c9a      	adds	r2, r3, #2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	621a      	str	r2, [r3, #32]
 80043c2:	e008      	b.n	80043d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	1c59      	adds	r1, r3, #1
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6211      	str	r1, [r2, #32]
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29b      	uxth	r3, r3
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	4619      	mov	r1, r3
 80043e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004408:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e000      	b.n	8004410 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800440e:	2302      	movs	r3, #2
  }
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004430:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff febe 	bl	80041bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b086      	sub	sp, #24
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b22      	cmp	r3, #34	; 0x22
 800445c:	f040 8099 	bne.w	8004592 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004468:	d117      	bne.n	800449a <UART_Receive_IT+0x50>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d113      	bne.n	800449a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004488:	b29a      	uxth	r2, r3
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	629a      	str	r2, [r3, #40]	; 0x28
 8004498:	e026      	b.n	80044e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ac:	d007      	beq.n	80044be <UART_Receive_IT+0x74>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <UART_Receive_IT+0x82>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	e008      	b.n	80044de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4619      	mov	r1, r3
 80044f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d148      	bne.n	800458e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0220 	bic.w	r2, r2, #32
 800450a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	2b01      	cmp	r3, #1
 800453a:	d123      	bne.n	8004584 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0210 	bic.w	r2, r2, #16
 8004550:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d10a      	bne.n	8004576 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fe2f 	bl	80041e0 <HAL_UARTEx_RxEventCallback>
 8004582:	e002      	b.n	800458a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fc f89d 	bl	80006c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e002      	b.n	8004594 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045d6:	f023 030c 	bic.w	r3, r3, #12
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2c      	ldr	r2, [pc, #176]	; (80046b0 <UART_SetConfig+0x114>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7fe fef4 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	e002      	b.n	8004612 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7fe fedc 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8004610:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009a      	lsls	r2, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <UART_SetConfig+0x118>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	0119      	lsls	r1, r3, #4
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009a      	lsls	r2, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	fbb2 f2f3 	udiv	r2, r2, r3
 8004648:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <UART_SetConfig+0x118>)
 800464a:	fba3 0302 	umull	r0, r3, r3, r2
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2064      	movs	r0, #100	; 0x64
 8004652:	fb00 f303 	mul.w	r3, r0, r3
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	3332      	adds	r3, #50	; 0x32
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <UART_SetConfig+0x118>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004668:	4419      	add	r1, r3
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009a      	lsls	r2, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <UART_SetConfig+0x118>)
 8004682:	fba3 0302 	umull	r0, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2064      	movs	r0, #100	; 0x64
 800468a:	fb00 f303 	mul.w	r3, r0, r3
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	; 0x32
 8004694:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <UART_SetConfig+0x118>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	440a      	add	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40013800 	.word	0x40013800
 80046b4:	51eb851f 	.word	0x51eb851f

080046b8 <__errno>:
 80046b8:	4b01      	ldr	r3, [pc, #4]	; (80046c0 <__errno+0x8>)
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	2000000c 	.word	0x2000000c

080046c4 <__libc_init_array>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	2600      	movs	r6, #0
 80046c8:	4d0c      	ldr	r5, [pc, #48]	; (80046fc <__libc_init_array+0x38>)
 80046ca:	4c0d      	ldr	r4, [pc, #52]	; (8004700 <__libc_init_array+0x3c>)
 80046cc:	1b64      	subs	r4, r4, r5
 80046ce:	10a4      	asrs	r4, r4, #2
 80046d0:	42a6      	cmp	r6, r4
 80046d2:	d109      	bne.n	80046e8 <__libc_init_array+0x24>
 80046d4:	f000 fcd0 	bl	8005078 <_init>
 80046d8:	2600      	movs	r6, #0
 80046da:	4d0a      	ldr	r5, [pc, #40]	; (8004704 <__libc_init_array+0x40>)
 80046dc:	4c0a      	ldr	r4, [pc, #40]	; (8004708 <__libc_init_array+0x44>)
 80046de:	1b64      	subs	r4, r4, r5
 80046e0:	10a4      	asrs	r4, r4, #2
 80046e2:	42a6      	cmp	r6, r4
 80046e4:	d105      	bne.n	80046f2 <__libc_init_array+0x2e>
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ec:	4798      	blx	r3
 80046ee:	3601      	adds	r6, #1
 80046f0:	e7ee      	b.n	80046d0 <__libc_init_array+0xc>
 80046f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f6:	4798      	blx	r3
 80046f8:	3601      	adds	r6, #1
 80046fa:	e7f2      	b.n	80046e2 <__libc_init_array+0x1e>
 80046fc:	08005184 	.word	0x08005184
 8004700:	08005184 	.word	0x08005184
 8004704:	08005184 	.word	0x08005184
 8004708:	08005188 	.word	0x08005188

0800470c <memset>:
 800470c:	4603      	mov	r3, r0
 800470e:	4402      	add	r2, r0
 8004710:	4293      	cmp	r3, r2
 8004712:	d100      	bne.n	8004716 <memset+0xa>
 8004714:	4770      	bx	lr
 8004716:	f803 1b01 	strb.w	r1, [r3], #1
 800471a:	e7f9      	b.n	8004710 <memset+0x4>

0800471c <sniprintf>:
 800471c:	b40c      	push	{r2, r3}
 800471e:	b530      	push	{r4, r5, lr}
 8004720:	4b17      	ldr	r3, [pc, #92]	; (8004780 <sniprintf+0x64>)
 8004722:	1e0c      	subs	r4, r1, #0
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	b09d      	sub	sp, #116	; 0x74
 8004728:	da08      	bge.n	800473c <sniprintf+0x20>
 800472a:	238b      	movs	r3, #139	; 0x8b
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	602b      	str	r3, [r5, #0]
 8004732:	b01d      	add	sp, #116	; 0x74
 8004734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004738:	b002      	add	sp, #8
 800473a:	4770      	bx	lr
 800473c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004740:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004744:	bf0c      	ite	eq
 8004746:	4623      	moveq	r3, r4
 8004748:	f104 33ff 	addne.w	r3, r4, #4294967295
 800474c:	9304      	str	r3, [sp, #16]
 800474e:	9307      	str	r3, [sp, #28]
 8004750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004754:	9002      	str	r0, [sp, #8]
 8004756:	9006      	str	r0, [sp, #24]
 8004758:	f8ad 3016 	strh.w	r3, [sp, #22]
 800475c:	4628      	mov	r0, r5
 800475e:	ab21      	add	r3, sp, #132	; 0x84
 8004760:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004762:	a902      	add	r1, sp, #8
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	f000 f889 	bl	800487c <_svfiprintf_r>
 800476a:	1c43      	adds	r3, r0, #1
 800476c:	bfbc      	itt	lt
 800476e:	238b      	movlt	r3, #139	; 0x8b
 8004770:	602b      	strlt	r3, [r5, #0]
 8004772:	2c00      	cmp	r4, #0
 8004774:	d0dd      	beq.n	8004732 <sniprintf+0x16>
 8004776:	2200      	movs	r2, #0
 8004778:	9b02      	ldr	r3, [sp, #8]
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	e7d9      	b.n	8004732 <sniprintf+0x16>
 800477e:	bf00      	nop
 8004780:	2000000c 	.word	0x2000000c

08004784 <siprintf>:
 8004784:	b40e      	push	{r1, r2, r3}
 8004786:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800478a:	b500      	push	{lr}
 800478c:	b09c      	sub	sp, #112	; 0x70
 800478e:	ab1d      	add	r3, sp, #116	; 0x74
 8004790:	9002      	str	r0, [sp, #8]
 8004792:	9006      	str	r0, [sp, #24]
 8004794:	9107      	str	r1, [sp, #28]
 8004796:	9104      	str	r1, [sp, #16]
 8004798:	4808      	ldr	r0, [pc, #32]	; (80047bc <siprintf+0x38>)
 800479a:	4909      	ldr	r1, [pc, #36]	; (80047c0 <siprintf+0x3c>)
 800479c:	f853 2b04 	ldr.w	r2, [r3], #4
 80047a0:	9105      	str	r1, [sp, #20]
 80047a2:	6800      	ldr	r0, [r0, #0]
 80047a4:	a902      	add	r1, sp, #8
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	f000 f868 	bl	800487c <_svfiprintf_r>
 80047ac:	2200      	movs	r2, #0
 80047ae:	9b02      	ldr	r3, [sp, #8]
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	b01c      	add	sp, #112	; 0x70
 80047b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047b8:	b003      	add	sp, #12
 80047ba:	4770      	bx	lr
 80047bc:	2000000c 	.word	0x2000000c
 80047c0:	ffff0208 	.word	0xffff0208

080047c4 <__ssputs_r>:
 80047c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c8:	688e      	ldr	r6, [r1, #8]
 80047ca:	4682      	mov	sl, r0
 80047cc:	429e      	cmp	r6, r3
 80047ce:	460c      	mov	r4, r1
 80047d0:	4690      	mov	r8, r2
 80047d2:	461f      	mov	r7, r3
 80047d4:	d838      	bhi.n	8004848 <__ssputs_r+0x84>
 80047d6:	898a      	ldrh	r2, [r1, #12]
 80047d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047dc:	d032      	beq.n	8004844 <__ssputs_r+0x80>
 80047de:	6825      	ldr	r5, [r4, #0]
 80047e0:	6909      	ldr	r1, [r1, #16]
 80047e2:	3301      	adds	r3, #1
 80047e4:	eba5 0901 	sub.w	r9, r5, r1
 80047e8:	6965      	ldr	r5, [r4, #20]
 80047ea:	444b      	add	r3, r9
 80047ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047f4:	106d      	asrs	r5, r5, #1
 80047f6:	429d      	cmp	r5, r3
 80047f8:	bf38      	it	cc
 80047fa:	461d      	movcc	r5, r3
 80047fc:	0553      	lsls	r3, r2, #21
 80047fe:	d531      	bpl.n	8004864 <__ssputs_r+0xa0>
 8004800:	4629      	mov	r1, r5
 8004802:	f000 fb6f 	bl	8004ee4 <_malloc_r>
 8004806:	4606      	mov	r6, r0
 8004808:	b950      	cbnz	r0, 8004820 <__ssputs_r+0x5c>
 800480a:	230c      	movs	r3, #12
 800480c:	f04f 30ff 	mov.w	r0, #4294967295
 8004810:	f8ca 3000 	str.w	r3, [sl]
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800481a:	81a3      	strh	r3, [r4, #12]
 800481c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004820:	464a      	mov	r2, r9
 8004822:	6921      	ldr	r1, [r4, #16]
 8004824:	f000 face 	bl	8004dc4 <memcpy>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800482e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004832:	81a3      	strh	r3, [r4, #12]
 8004834:	6126      	str	r6, [r4, #16]
 8004836:	444e      	add	r6, r9
 8004838:	6026      	str	r6, [r4, #0]
 800483a:	463e      	mov	r6, r7
 800483c:	6165      	str	r5, [r4, #20]
 800483e:	eba5 0509 	sub.w	r5, r5, r9
 8004842:	60a5      	str	r5, [r4, #8]
 8004844:	42be      	cmp	r6, r7
 8004846:	d900      	bls.n	800484a <__ssputs_r+0x86>
 8004848:	463e      	mov	r6, r7
 800484a:	4632      	mov	r2, r6
 800484c:	4641      	mov	r1, r8
 800484e:	6820      	ldr	r0, [r4, #0]
 8004850:	f000 fac6 	bl	8004de0 <memmove>
 8004854:	68a3      	ldr	r3, [r4, #8]
 8004856:	2000      	movs	r0, #0
 8004858:	1b9b      	subs	r3, r3, r6
 800485a:	60a3      	str	r3, [r4, #8]
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	4433      	add	r3, r6
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	e7db      	b.n	800481c <__ssputs_r+0x58>
 8004864:	462a      	mov	r2, r5
 8004866:	f000 fbb1 	bl	8004fcc <_realloc_r>
 800486a:	4606      	mov	r6, r0
 800486c:	2800      	cmp	r0, #0
 800486e:	d1e1      	bne.n	8004834 <__ssputs_r+0x70>
 8004870:	4650      	mov	r0, sl
 8004872:	6921      	ldr	r1, [r4, #16]
 8004874:	f000 face 	bl	8004e14 <_free_r>
 8004878:	e7c7      	b.n	800480a <__ssputs_r+0x46>
	...

0800487c <_svfiprintf_r>:
 800487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004880:	4698      	mov	r8, r3
 8004882:	898b      	ldrh	r3, [r1, #12]
 8004884:	4607      	mov	r7, r0
 8004886:	061b      	lsls	r3, r3, #24
 8004888:	460d      	mov	r5, r1
 800488a:	4614      	mov	r4, r2
 800488c:	b09d      	sub	sp, #116	; 0x74
 800488e:	d50e      	bpl.n	80048ae <_svfiprintf_r+0x32>
 8004890:	690b      	ldr	r3, [r1, #16]
 8004892:	b963      	cbnz	r3, 80048ae <_svfiprintf_r+0x32>
 8004894:	2140      	movs	r1, #64	; 0x40
 8004896:	f000 fb25 	bl	8004ee4 <_malloc_r>
 800489a:	6028      	str	r0, [r5, #0]
 800489c:	6128      	str	r0, [r5, #16]
 800489e:	b920      	cbnz	r0, 80048aa <_svfiprintf_r+0x2e>
 80048a0:	230c      	movs	r3, #12
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	e0d1      	b.n	8004a4e <_svfiprintf_r+0x1d2>
 80048aa:	2340      	movs	r3, #64	; 0x40
 80048ac:	616b      	str	r3, [r5, #20]
 80048ae:	2300      	movs	r3, #0
 80048b0:	9309      	str	r3, [sp, #36]	; 0x24
 80048b2:	2320      	movs	r3, #32
 80048b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048b8:	2330      	movs	r3, #48	; 0x30
 80048ba:	f04f 0901 	mov.w	r9, #1
 80048be:	f8cd 800c 	str.w	r8, [sp, #12]
 80048c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a68 <_svfiprintf_r+0x1ec>
 80048c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048ca:	4623      	mov	r3, r4
 80048cc:	469a      	mov	sl, r3
 80048ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048d2:	b10a      	cbz	r2, 80048d8 <_svfiprintf_r+0x5c>
 80048d4:	2a25      	cmp	r2, #37	; 0x25
 80048d6:	d1f9      	bne.n	80048cc <_svfiprintf_r+0x50>
 80048d8:	ebba 0b04 	subs.w	fp, sl, r4
 80048dc:	d00b      	beq.n	80048f6 <_svfiprintf_r+0x7a>
 80048de:	465b      	mov	r3, fp
 80048e0:	4622      	mov	r2, r4
 80048e2:	4629      	mov	r1, r5
 80048e4:	4638      	mov	r0, r7
 80048e6:	f7ff ff6d 	bl	80047c4 <__ssputs_r>
 80048ea:	3001      	adds	r0, #1
 80048ec:	f000 80aa 	beq.w	8004a44 <_svfiprintf_r+0x1c8>
 80048f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048f2:	445a      	add	r2, fp
 80048f4:	9209      	str	r2, [sp, #36]	; 0x24
 80048f6:	f89a 3000 	ldrb.w	r3, [sl]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 80a2 	beq.w	8004a44 <_svfiprintf_r+0x1c8>
 8004900:	2300      	movs	r3, #0
 8004902:	f04f 32ff 	mov.w	r2, #4294967295
 8004906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800490a:	f10a 0a01 	add.w	sl, sl, #1
 800490e:	9304      	str	r3, [sp, #16]
 8004910:	9307      	str	r3, [sp, #28]
 8004912:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004916:	931a      	str	r3, [sp, #104]	; 0x68
 8004918:	4654      	mov	r4, sl
 800491a:	2205      	movs	r2, #5
 800491c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004920:	4851      	ldr	r0, [pc, #324]	; (8004a68 <_svfiprintf_r+0x1ec>)
 8004922:	f000 fa41 	bl	8004da8 <memchr>
 8004926:	9a04      	ldr	r2, [sp, #16]
 8004928:	b9d8      	cbnz	r0, 8004962 <_svfiprintf_r+0xe6>
 800492a:	06d0      	lsls	r0, r2, #27
 800492c:	bf44      	itt	mi
 800492e:	2320      	movmi	r3, #32
 8004930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004934:	0711      	lsls	r1, r2, #28
 8004936:	bf44      	itt	mi
 8004938:	232b      	movmi	r3, #43	; 0x2b
 800493a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800493e:	f89a 3000 	ldrb.w	r3, [sl]
 8004942:	2b2a      	cmp	r3, #42	; 0x2a
 8004944:	d015      	beq.n	8004972 <_svfiprintf_r+0xf6>
 8004946:	4654      	mov	r4, sl
 8004948:	2000      	movs	r0, #0
 800494a:	f04f 0c0a 	mov.w	ip, #10
 800494e:	9a07      	ldr	r2, [sp, #28]
 8004950:	4621      	mov	r1, r4
 8004952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004956:	3b30      	subs	r3, #48	; 0x30
 8004958:	2b09      	cmp	r3, #9
 800495a:	d94e      	bls.n	80049fa <_svfiprintf_r+0x17e>
 800495c:	b1b0      	cbz	r0, 800498c <_svfiprintf_r+0x110>
 800495e:	9207      	str	r2, [sp, #28]
 8004960:	e014      	b.n	800498c <_svfiprintf_r+0x110>
 8004962:	eba0 0308 	sub.w	r3, r0, r8
 8004966:	fa09 f303 	lsl.w	r3, r9, r3
 800496a:	4313      	orrs	r3, r2
 800496c:	46a2      	mov	sl, r4
 800496e:	9304      	str	r3, [sp, #16]
 8004970:	e7d2      	b.n	8004918 <_svfiprintf_r+0x9c>
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	1d19      	adds	r1, r3, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	9103      	str	r1, [sp, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	bfbb      	ittet	lt
 800497e:	425b      	neglt	r3, r3
 8004980:	f042 0202 	orrlt.w	r2, r2, #2
 8004984:	9307      	strge	r3, [sp, #28]
 8004986:	9307      	strlt	r3, [sp, #28]
 8004988:	bfb8      	it	lt
 800498a:	9204      	strlt	r2, [sp, #16]
 800498c:	7823      	ldrb	r3, [r4, #0]
 800498e:	2b2e      	cmp	r3, #46	; 0x2e
 8004990:	d10c      	bne.n	80049ac <_svfiprintf_r+0x130>
 8004992:	7863      	ldrb	r3, [r4, #1]
 8004994:	2b2a      	cmp	r3, #42	; 0x2a
 8004996:	d135      	bne.n	8004a04 <_svfiprintf_r+0x188>
 8004998:	9b03      	ldr	r3, [sp, #12]
 800499a:	3402      	adds	r4, #2
 800499c:	1d1a      	adds	r2, r3, #4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	9203      	str	r2, [sp, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bfb8      	it	lt
 80049a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80049aa:	9305      	str	r3, [sp, #20]
 80049ac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004a6c <_svfiprintf_r+0x1f0>
 80049b0:	2203      	movs	r2, #3
 80049b2:	4650      	mov	r0, sl
 80049b4:	7821      	ldrb	r1, [r4, #0]
 80049b6:	f000 f9f7 	bl	8004da8 <memchr>
 80049ba:	b140      	cbz	r0, 80049ce <_svfiprintf_r+0x152>
 80049bc:	2340      	movs	r3, #64	; 0x40
 80049be:	eba0 000a 	sub.w	r0, r0, sl
 80049c2:	fa03 f000 	lsl.w	r0, r3, r0
 80049c6:	9b04      	ldr	r3, [sp, #16]
 80049c8:	3401      	adds	r4, #1
 80049ca:	4303      	orrs	r3, r0
 80049cc:	9304      	str	r3, [sp, #16]
 80049ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049d2:	2206      	movs	r2, #6
 80049d4:	4826      	ldr	r0, [pc, #152]	; (8004a70 <_svfiprintf_r+0x1f4>)
 80049d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049da:	f000 f9e5 	bl	8004da8 <memchr>
 80049de:	2800      	cmp	r0, #0
 80049e0:	d038      	beq.n	8004a54 <_svfiprintf_r+0x1d8>
 80049e2:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <_svfiprintf_r+0x1f8>)
 80049e4:	bb1b      	cbnz	r3, 8004a2e <_svfiprintf_r+0x1b2>
 80049e6:	9b03      	ldr	r3, [sp, #12]
 80049e8:	3307      	adds	r3, #7
 80049ea:	f023 0307 	bic.w	r3, r3, #7
 80049ee:	3308      	adds	r3, #8
 80049f0:	9303      	str	r3, [sp, #12]
 80049f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049f4:	4433      	add	r3, r6
 80049f6:	9309      	str	r3, [sp, #36]	; 0x24
 80049f8:	e767      	b.n	80048ca <_svfiprintf_r+0x4e>
 80049fa:	460c      	mov	r4, r1
 80049fc:	2001      	movs	r0, #1
 80049fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a02:	e7a5      	b.n	8004950 <_svfiprintf_r+0xd4>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f04f 0c0a 	mov.w	ip, #10
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	3401      	adds	r4, #1
 8004a0e:	9305      	str	r3, [sp, #20]
 8004a10:	4620      	mov	r0, r4
 8004a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a16:	3a30      	subs	r2, #48	; 0x30
 8004a18:	2a09      	cmp	r2, #9
 8004a1a:	d903      	bls.n	8004a24 <_svfiprintf_r+0x1a8>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0c5      	beq.n	80049ac <_svfiprintf_r+0x130>
 8004a20:	9105      	str	r1, [sp, #20]
 8004a22:	e7c3      	b.n	80049ac <_svfiprintf_r+0x130>
 8004a24:	4604      	mov	r4, r0
 8004a26:	2301      	movs	r3, #1
 8004a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a2c:	e7f0      	b.n	8004a10 <_svfiprintf_r+0x194>
 8004a2e:	ab03      	add	r3, sp, #12
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	462a      	mov	r2, r5
 8004a34:	4638      	mov	r0, r7
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <_svfiprintf_r+0x1fc>)
 8004a38:	a904      	add	r1, sp, #16
 8004a3a:	f3af 8000 	nop.w
 8004a3e:	1c42      	adds	r2, r0, #1
 8004a40:	4606      	mov	r6, r0
 8004a42:	d1d6      	bne.n	80049f2 <_svfiprintf_r+0x176>
 8004a44:	89ab      	ldrh	r3, [r5, #12]
 8004a46:	065b      	lsls	r3, r3, #25
 8004a48:	f53f af2c 	bmi.w	80048a4 <_svfiprintf_r+0x28>
 8004a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a4e:	b01d      	add	sp, #116	; 0x74
 8004a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a54:	ab03      	add	r3, sp, #12
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	462a      	mov	r2, r5
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <_svfiprintf_r+0x1fc>)
 8004a5e:	a904      	add	r1, sp, #16
 8004a60:	f000 f87c 	bl	8004b5c <_printf_i>
 8004a64:	e7eb      	b.n	8004a3e <_svfiprintf_r+0x1c2>
 8004a66:	bf00      	nop
 8004a68:	08005150 	.word	0x08005150
 8004a6c:	08005156 	.word	0x08005156
 8004a70:	0800515a 	.word	0x0800515a
 8004a74:	00000000 	.word	0x00000000
 8004a78:	080047c5 	.word	0x080047c5

08004a7c <_printf_common>:
 8004a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	4616      	mov	r6, r2
 8004a82:	4699      	mov	r9, r3
 8004a84:	688a      	ldr	r2, [r1, #8]
 8004a86:	690b      	ldr	r3, [r1, #16]
 8004a88:	4607      	mov	r7, r0
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	bfb8      	it	lt
 8004a8e:	4613      	movlt	r3, r2
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a96:	460c      	mov	r4, r1
 8004a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a9c:	b10a      	cbz	r2, 8004aa2 <_printf_common+0x26>
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	6033      	str	r3, [r6, #0]
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	0699      	lsls	r1, r3, #26
 8004aa6:	bf42      	ittt	mi
 8004aa8:	6833      	ldrmi	r3, [r6, #0]
 8004aaa:	3302      	addmi	r3, #2
 8004aac:	6033      	strmi	r3, [r6, #0]
 8004aae:	6825      	ldr	r5, [r4, #0]
 8004ab0:	f015 0506 	ands.w	r5, r5, #6
 8004ab4:	d106      	bne.n	8004ac4 <_printf_common+0x48>
 8004ab6:	f104 0a19 	add.w	sl, r4, #25
 8004aba:	68e3      	ldr	r3, [r4, #12]
 8004abc:	6832      	ldr	r2, [r6, #0]
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	42ab      	cmp	r3, r5
 8004ac2:	dc28      	bgt.n	8004b16 <_printf_common+0x9a>
 8004ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ac8:	1e13      	subs	r3, r2, #0
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	bf18      	it	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	0692      	lsls	r2, r2, #26
 8004ad2:	d42d      	bmi.n	8004b30 <_printf_common+0xb4>
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004adc:	47c0      	blx	r8
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d020      	beq.n	8004b24 <_printf_common+0xa8>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	68e5      	ldr	r5, [r4, #12]
 8004ae6:	f003 0306 	and.w	r3, r3, #6
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	bf18      	it	ne
 8004aee:	2500      	movne	r5, #0
 8004af0:	6832      	ldr	r2, [r6, #0]
 8004af2:	f04f 0600 	mov.w	r6, #0
 8004af6:	68a3      	ldr	r3, [r4, #8]
 8004af8:	bf08      	it	eq
 8004afa:	1aad      	subeq	r5, r5, r2
 8004afc:	6922      	ldr	r2, [r4, #16]
 8004afe:	bf08      	it	eq
 8004b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bfc4      	itt	gt
 8004b08:	1a9b      	subgt	r3, r3, r2
 8004b0a:	18ed      	addgt	r5, r5, r3
 8004b0c:	341a      	adds	r4, #26
 8004b0e:	42b5      	cmp	r5, r6
 8004b10:	d11a      	bne.n	8004b48 <_printf_common+0xcc>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e008      	b.n	8004b28 <_printf_common+0xac>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4652      	mov	r2, sl
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	47c0      	blx	r8
 8004b20:	3001      	adds	r0, #1
 8004b22:	d103      	bne.n	8004b2c <_printf_common+0xb0>
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2c:	3501      	adds	r5, #1
 8004b2e:	e7c4      	b.n	8004aba <_printf_common+0x3e>
 8004b30:	2030      	movs	r0, #48	; 0x30
 8004b32:	18e1      	adds	r1, r4, r3
 8004b34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b3e:	4422      	add	r2, r4
 8004b40:	3302      	adds	r3, #2
 8004b42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b46:	e7c5      	b.n	8004ad4 <_printf_common+0x58>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	4638      	mov	r0, r7
 8004b50:	47c0      	blx	r8
 8004b52:	3001      	adds	r0, #1
 8004b54:	d0e6      	beq.n	8004b24 <_printf_common+0xa8>
 8004b56:	3601      	adds	r6, #1
 8004b58:	e7d9      	b.n	8004b0e <_printf_common+0x92>
	...

08004b5c <_printf_i>:
 8004b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	7e0f      	ldrb	r7, [r1, #24]
 8004b62:	4691      	mov	r9, r2
 8004b64:	2f78      	cmp	r7, #120	; 0x78
 8004b66:	4680      	mov	r8, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	469a      	mov	sl, r3
 8004b6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b72:	d807      	bhi.n	8004b84 <_printf_i+0x28>
 8004b74:	2f62      	cmp	r7, #98	; 0x62
 8004b76:	d80a      	bhi.n	8004b8e <_printf_i+0x32>
 8004b78:	2f00      	cmp	r7, #0
 8004b7a:	f000 80d9 	beq.w	8004d30 <_printf_i+0x1d4>
 8004b7e:	2f58      	cmp	r7, #88	; 0x58
 8004b80:	f000 80a4 	beq.w	8004ccc <_printf_i+0x170>
 8004b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b8c:	e03a      	b.n	8004c04 <_printf_i+0xa8>
 8004b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b92:	2b15      	cmp	r3, #21
 8004b94:	d8f6      	bhi.n	8004b84 <_printf_i+0x28>
 8004b96:	a101      	add	r1, pc, #4	; (adr r1, 8004b9c <_printf_i+0x40>)
 8004b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b9c:	08004bf5 	.word	0x08004bf5
 8004ba0:	08004c09 	.word	0x08004c09
 8004ba4:	08004b85 	.word	0x08004b85
 8004ba8:	08004b85 	.word	0x08004b85
 8004bac:	08004b85 	.word	0x08004b85
 8004bb0:	08004b85 	.word	0x08004b85
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004b85 	.word	0x08004b85
 8004bbc:	08004b85 	.word	0x08004b85
 8004bc0:	08004b85 	.word	0x08004b85
 8004bc4:	08004b85 	.word	0x08004b85
 8004bc8:	08004d17 	.word	0x08004d17
 8004bcc:	08004c39 	.word	0x08004c39
 8004bd0:	08004cf9 	.word	0x08004cf9
 8004bd4:	08004b85 	.word	0x08004b85
 8004bd8:	08004b85 	.word	0x08004b85
 8004bdc:	08004d39 	.word	0x08004d39
 8004be0:	08004b85 	.word	0x08004b85
 8004be4:	08004c39 	.word	0x08004c39
 8004be8:	08004b85 	.word	0x08004b85
 8004bec:	08004b85 	.word	0x08004b85
 8004bf0:	08004d01 	.word	0x08004d01
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	602a      	str	r2, [r5, #0]
 8004bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0a4      	b.n	8004d52 <_printf_i+0x1f6>
 8004c08:	6820      	ldr	r0, [r4, #0]
 8004c0a:	6829      	ldr	r1, [r5, #0]
 8004c0c:	0606      	lsls	r6, r0, #24
 8004c0e:	f101 0304 	add.w	r3, r1, #4
 8004c12:	d50a      	bpl.n	8004c2a <_printf_i+0xce>
 8004c14:	680e      	ldr	r6, [r1, #0]
 8004c16:	602b      	str	r3, [r5, #0]
 8004c18:	2e00      	cmp	r6, #0
 8004c1a:	da03      	bge.n	8004c24 <_printf_i+0xc8>
 8004c1c:	232d      	movs	r3, #45	; 0x2d
 8004c1e:	4276      	negs	r6, r6
 8004c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c24:	230a      	movs	r3, #10
 8004c26:	485e      	ldr	r0, [pc, #376]	; (8004da0 <_printf_i+0x244>)
 8004c28:	e019      	b.n	8004c5e <_printf_i+0x102>
 8004c2a:	680e      	ldr	r6, [r1, #0]
 8004c2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c30:	602b      	str	r3, [r5, #0]
 8004c32:	bf18      	it	ne
 8004c34:	b236      	sxthne	r6, r6
 8004c36:	e7ef      	b.n	8004c18 <_printf_i+0xbc>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	1d19      	adds	r1, r3, #4
 8004c3e:	6029      	str	r1, [r5, #0]
 8004c40:	0601      	lsls	r1, r0, #24
 8004c42:	d501      	bpl.n	8004c48 <_printf_i+0xec>
 8004c44:	681e      	ldr	r6, [r3, #0]
 8004c46:	e002      	b.n	8004c4e <_printf_i+0xf2>
 8004c48:	0646      	lsls	r6, r0, #25
 8004c4a:	d5fb      	bpl.n	8004c44 <_printf_i+0xe8>
 8004c4c:	881e      	ldrh	r6, [r3, #0]
 8004c4e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c50:	bf0c      	ite	eq
 8004c52:	2308      	moveq	r3, #8
 8004c54:	230a      	movne	r3, #10
 8004c56:	4852      	ldr	r0, [pc, #328]	; (8004da0 <_printf_i+0x244>)
 8004c58:	2100      	movs	r1, #0
 8004c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c5e:	6865      	ldr	r5, [r4, #4]
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	bfa8      	it	ge
 8004c64:	6821      	ldrge	r1, [r4, #0]
 8004c66:	60a5      	str	r5, [r4, #8]
 8004c68:	bfa4      	itt	ge
 8004c6a:	f021 0104 	bicge.w	r1, r1, #4
 8004c6e:	6021      	strge	r1, [r4, #0]
 8004c70:	b90e      	cbnz	r6, 8004c76 <_printf_i+0x11a>
 8004c72:	2d00      	cmp	r5, #0
 8004c74:	d04d      	beq.n	8004d12 <_printf_i+0x1b6>
 8004c76:	4615      	mov	r5, r2
 8004c78:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c7c:	fb03 6711 	mls	r7, r3, r1, r6
 8004c80:	5dc7      	ldrb	r7, [r0, r7]
 8004c82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c86:	4637      	mov	r7, r6
 8004c88:	42bb      	cmp	r3, r7
 8004c8a:	460e      	mov	r6, r1
 8004c8c:	d9f4      	bls.n	8004c78 <_printf_i+0x11c>
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d10b      	bne.n	8004caa <_printf_i+0x14e>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	07de      	lsls	r6, r3, #31
 8004c96:	d508      	bpl.n	8004caa <_printf_i+0x14e>
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	6861      	ldr	r1, [r4, #4]
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	bfde      	ittt	le
 8004ca0:	2330      	movle	r3, #48	; 0x30
 8004ca2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ca6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004caa:	1b52      	subs	r2, r2, r5
 8004cac:	6122      	str	r2, [r4, #16]
 8004cae:	464b      	mov	r3, r9
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	f8cd a000 	str.w	sl, [sp]
 8004cb8:	aa03      	add	r2, sp, #12
 8004cba:	f7ff fedf 	bl	8004a7c <_printf_common>
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d14c      	bne.n	8004d5c <_printf_i+0x200>
 8004cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc6:	b004      	add	sp, #16
 8004cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ccc:	4834      	ldr	r0, [pc, #208]	; (8004da0 <_printf_i+0x244>)
 8004cce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cd2:	6829      	ldr	r1, [r5, #0]
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cda:	6029      	str	r1, [r5, #0]
 8004cdc:	061d      	lsls	r5, r3, #24
 8004cde:	d514      	bpl.n	8004d0a <_printf_i+0x1ae>
 8004ce0:	07df      	lsls	r7, r3, #31
 8004ce2:	bf44      	itt	mi
 8004ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ce8:	6023      	strmi	r3, [r4, #0]
 8004cea:	b91e      	cbnz	r6, 8004cf4 <_printf_i+0x198>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	f023 0320 	bic.w	r3, r3, #32
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	e7af      	b.n	8004c58 <_printf_i+0xfc>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	f043 0320 	orr.w	r3, r3, #32
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	2378      	movs	r3, #120	; 0x78
 8004d02:	4828      	ldr	r0, [pc, #160]	; (8004da4 <_printf_i+0x248>)
 8004d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d08:	e7e3      	b.n	8004cd2 <_printf_i+0x176>
 8004d0a:	0659      	lsls	r1, r3, #25
 8004d0c:	bf48      	it	mi
 8004d0e:	b2b6      	uxthmi	r6, r6
 8004d10:	e7e6      	b.n	8004ce0 <_printf_i+0x184>
 8004d12:	4615      	mov	r5, r2
 8004d14:	e7bb      	b.n	8004c8e <_printf_i+0x132>
 8004d16:	682b      	ldr	r3, [r5, #0]
 8004d18:	6826      	ldr	r6, [r4, #0]
 8004d1a:	1d18      	adds	r0, r3, #4
 8004d1c:	6961      	ldr	r1, [r4, #20]
 8004d1e:	6028      	str	r0, [r5, #0]
 8004d20:	0635      	lsls	r5, r6, #24
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	d501      	bpl.n	8004d2a <_printf_i+0x1ce>
 8004d26:	6019      	str	r1, [r3, #0]
 8004d28:	e002      	b.n	8004d30 <_printf_i+0x1d4>
 8004d2a:	0670      	lsls	r0, r6, #25
 8004d2c:	d5fb      	bpl.n	8004d26 <_printf_i+0x1ca>
 8004d2e:	8019      	strh	r1, [r3, #0]
 8004d30:	2300      	movs	r3, #0
 8004d32:	4615      	mov	r5, r2
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	e7ba      	b.n	8004cae <_printf_i+0x152>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	1d1a      	adds	r2, r3, #4
 8004d3e:	602a      	str	r2, [r5, #0]
 8004d40:	681d      	ldr	r5, [r3, #0]
 8004d42:	6862      	ldr	r2, [r4, #4]
 8004d44:	4628      	mov	r0, r5
 8004d46:	f000 f82f 	bl	8004da8 <memchr>
 8004d4a:	b108      	cbz	r0, 8004d50 <_printf_i+0x1f4>
 8004d4c:	1b40      	subs	r0, r0, r5
 8004d4e:	6060      	str	r0, [r4, #4]
 8004d50:	6863      	ldr	r3, [r4, #4]
 8004d52:	6123      	str	r3, [r4, #16]
 8004d54:	2300      	movs	r3, #0
 8004d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d5a:	e7a8      	b.n	8004cae <_printf_i+0x152>
 8004d5c:	462a      	mov	r2, r5
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	47d0      	blx	sl
 8004d66:	3001      	adds	r0, #1
 8004d68:	d0ab      	beq.n	8004cc2 <_printf_i+0x166>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	079b      	lsls	r3, r3, #30
 8004d6e:	d413      	bmi.n	8004d98 <_printf_i+0x23c>
 8004d70:	68e0      	ldr	r0, [r4, #12]
 8004d72:	9b03      	ldr	r3, [sp, #12]
 8004d74:	4298      	cmp	r0, r3
 8004d76:	bfb8      	it	lt
 8004d78:	4618      	movlt	r0, r3
 8004d7a:	e7a4      	b.n	8004cc6 <_printf_i+0x16a>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	4632      	mov	r2, r6
 8004d80:	4649      	mov	r1, r9
 8004d82:	4640      	mov	r0, r8
 8004d84:	47d0      	blx	sl
 8004d86:	3001      	adds	r0, #1
 8004d88:	d09b      	beq.n	8004cc2 <_printf_i+0x166>
 8004d8a:	3501      	adds	r5, #1
 8004d8c:	68e3      	ldr	r3, [r4, #12]
 8004d8e:	9903      	ldr	r1, [sp, #12]
 8004d90:	1a5b      	subs	r3, r3, r1
 8004d92:	42ab      	cmp	r3, r5
 8004d94:	dcf2      	bgt.n	8004d7c <_printf_i+0x220>
 8004d96:	e7eb      	b.n	8004d70 <_printf_i+0x214>
 8004d98:	2500      	movs	r5, #0
 8004d9a:	f104 0619 	add.w	r6, r4, #25
 8004d9e:	e7f5      	b.n	8004d8c <_printf_i+0x230>
 8004da0:	08005161 	.word	0x08005161
 8004da4:	08005172 	.word	0x08005172

08004da8 <memchr>:
 8004da8:	4603      	mov	r3, r0
 8004daa:	b510      	push	{r4, lr}
 8004dac:	b2c9      	uxtb	r1, r1
 8004dae:	4402      	add	r2, r0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	d101      	bne.n	8004dba <memchr+0x12>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e003      	b.n	8004dc2 <memchr+0x1a>
 8004dba:	7804      	ldrb	r4, [r0, #0]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	428c      	cmp	r4, r1
 8004dc0:	d1f6      	bne.n	8004db0 <memchr+0x8>
 8004dc2:	bd10      	pop	{r4, pc}

08004dc4 <memcpy>:
 8004dc4:	440a      	add	r2, r1
 8004dc6:	4291      	cmp	r1, r2
 8004dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dcc:	d100      	bne.n	8004dd0 <memcpy+0xc>
 8004dce:	4770      	bx	lr
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dd6:	4291      	cmp	r1, r2
 8004dd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ddc:	d1f9      	bne.n	8004dd2 <memcpy+0xe>
 8004dde:	bd10      	pop	{r4, pc}

08004de0 <memmove>:
 8004de0:	4288      	cmp	r0, r1
 8004de2:	b510      	push	{r4, lr}
 8004de4:	eb01 0402 	add.w	r4, r1, r2
 8004de8:	d902      	bls.n	8004df0 <memmove+0x10>
 8004dea:	4284      	cmp	r4, r0
 8004dec:	4623      	mov	r3, r4
 8004dee:	d807      	bhi.n	8004e00 <memmove+0x20>
 8004df0:	1e43      	subs	r3, r0, #1
 8004df2:	42a1      	cmp	r1, r4
 8004df4:	d008      	beq.n	8004e08 <memmove+0x28>
 8004df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dfe:	e7f8      	b.n	8004df2 <memmove+0x12>
 8004e00:	4601      	mov	r1, r0
 8004e02:	4402      	add	r2, r0
 8004e04:	428a      	cmp	r2, r1
 8004e06:	d100      	bne.n	8004e0a <memmove+0x2a>
 8004e08:	bd10      	pop	{r4, pc}
 8004e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e12:	e7f7      	b.n	8004e04 <memmove+0x24>

08004e14 <_free_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4605      	mov	r5, r0
 8004e18:	2900      	cmp	r1, #0
 8004e1a:	d040      	beq.n	8004e9e <_free_r+0x8a>
 8004e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e20:	1f0c      	subs	r4, r1, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bfb8      	it	lt
 8004e26:	18e4      	addlt	r4, r4, r3
 8004e28:	f000 f910 	bl	800504c <__malloc_lock>
 8004e2c:	4a1c      	ldr	r2, [pc, #112]	; (8004ea0 <_free_r+0x8c>)
 8004e2e:	6813      	ldr	r3, [r2, #0]
 8004e30:	b933      	cbnz	r3, 8004e40 <_free_r+0x2c>
 8004e32:	6063      	str	r3, [r4, #4]
 8004e34:	6014      	str	r4, [r2, #0]
 8004e36:	4628      	mov	r0, r5
 8004e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e3c:	f000 b90c 	b.w	8005058 <__malloc_unlock>
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	d908      	bls.n	8004e56 <_free_r+0x42>
 8004e44:	6820      	ldr	r0, [r4, #0]
 8004e46:	1821      	adds	r1, r4, r0
 8004e48:	428b      	cmp	r3, r1
 8004e4a:	bf01      	itttt	eq
 8004e4c:	6819      	ldreq	r1, [r3, #0]
 8004e4e:	685b      	ldreq	r3, [r3, #4]
 8004e50:	1809      	addeq	r1, r1, r0
 8004e52:	6021      	streq	r1, [r4, #0]
 8004e54:	e7ed      	b.n	8004e32 <_free_r+0x1e>
 8004e56:	461a      	mov	r2, r3
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	b10b      	cbz	r3, 8004e60 <_free_r+0x4c>
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	d9fa      	bls.n	8004e56 <_free_r+0x42>
 8004e60:	6811      	ldr	r1, [r2, #0]
 8004e62:	1850      	adds	r0, r2, r1
 8004e64:	42a0      	cmp	r0, r4
 8004e66:	d10b      	bne.n	8004e80 <_free_r+0x6c>
 8004e68:	6820      	ldr	r0, [r4, #0]
 8004e6a:	4401      	add	r1, r0
 8004e6c:	1850      	adds	r0, r2, r1
 8004e6e:	4283      	cmp	r3, r0
 8004e70:	6011      	str	r1, [r2, #0]
 8004e72:	d1e0      	bne.n	8004e36 <_free_r+0x22>
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4401      	add	r1, r0
 8004e7a:	6011      	str	r1, [r2, #0]
 8004e7c:	6053      	str	r3, [r2, #4]
 8004e7e:	e7da      	b.n	8004e36 <_free_r+0x22>
 8004e80:	d902      	bls.n	8004e88 <_free_r+0x74>
 8004e82:	230c      	movs	r3, #12
 8004e84:	602b      	str	r3, [r5, #0]
 8004e86:	e7d6      	b.n	8004e36 <_free_r+0x22>
 8004e88:	6820      	ldr	r0, [r4, #0]
 8004e8a:	1821      	adds	r1, r4, r0
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	bf01      	itttt	eq
 8004e90:	6819      	ldreq	r1, [r3, #0]
 8004e92:	685b      	ldreq	r3, [r3, #4]
 8004e94:	1809      	addeq	r1, r1, r0
 8004e96:	6021      	streq	r1, [r4, #0]
 8004e98:	6063      	str	r3, [r4, #4]
 8004e9a:	6054      	str	r4, [r2, #4]
 8004e9c:	e7cb      	b.n	8004e36 <_free_r+0x22>
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	20000238 	.word	0x20000238

08004ea4 <sbrk_aligned>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	4e0e      	ldr	r6, [pc, #56]	; (8004ee0 <sbrk_aligned+0x3c>)
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	6831      	ldr	r1, [r6, #0]
 8004eac:	4605      	mov	r5, r0
 8004eae:	b911      	cbnz	r1, 8004eb6 <sbrk_aligned+0x12>
 8004eb0:	f000 f8bc 	bl	800502c <_sbrk_r>
 8004eb4:	6030      	str	r0, [r6, #0]
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 f8b7 	bl	800502c <_sbrk_r>
 8004ebe:	1c43      	adds	r3, r0, #1
 8004ec0:	d00a      	beq.n	8004ed8 <sbrk_aligned+0x34>
 8004ec2:	1cc4      	adds	r4, r0, #3
 8004ec4:	f024 0403 	bic.w	r4, r4, #3
 8004ec8:	42a0      	cmp	r0, r4
 8004eca:	d007      	beq.n	8004edc <sbrk_aligned+0x38>
 8004ecc:	1a21      	subs	r1, r4, r0
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 f8ac 	bl	800502c <_sbrk_r>
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d101      	bne.n	8004edc <sbrk_aligned+0x38>
 8004ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8004edc:	4620      	mov	r0, r4
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	2000023c 	.word	0x2000023c

08004ee4 <_malloc_r>:
 8004ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee8:	1ccd      	adds	r5, r1, #3
 8004eea:	f025 0503 	bic.w	r5, r5, #3
 8004eee:	3508      	adds	r5, #8
 8004ef0:	2d0c      	cmp	r5, #12
 8004ef2:	bf38      	it	cc
 8004ef4:	250c      	movcc	r5, #12
 8004ef6:	2d00      	cmp	r5, #0
 8004ef8:	4607      	mov	r7, r0
 8004efa:	db01      	blt.n	8004f00 <_malloc_r+0x1c>
 8004efc:	42a9      	cmp	r1, r5
 8004efe:	d905      	bls.n	8004f0c <_malloc_r+0x28>
 8004f00:	230c      	movs	r3, #12
 8004f02:	2600      	movs	r6, #0
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4630      	mov	r0, r6
 8004f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f0c:	4e2e      	ldr	r6, [pc, #184]	; (8004fc8 <_malloc_r+0xe4>)
 8004f0e:	f000 f89d 	bl	800504c <__malloc_lock>
 8004f12:	6833      	ldr	r3, [r6, #0]
 8004f14:	461c      	mov	r4, r3
 8004f16:	bb34      	cbnz	r4, 8004f66 <_malloc_r+0x82>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	f7ff ffc2 	bl	8004ea4 <sbrk_aligned>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	4604      	mov	r4, r0
 8004f24:	d14d      	bne.n	8004fc2 <_malloc_r+0xde>
 8004f26:	6834      	ldr	r4, [r6, #0]
 8004f28:	4626      	mov	r6, r4
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	d140      	bne.n	8004fb0 <_malloc_r+0xcc>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	4631      	mov	r1, r6
 8004f32:	4638      	mov	r0, r7
 8004f34:	eb04 0803 	add.w	r8, r4, r3
 8004f38:	f000 f878 	bl	800502c <_sbrk_r>
 8004f3c:	4580      	cmp	r8, r0
 8004f3e:	d13a      	bne.n	8004fb6 <_malloc_r+0xd2>
 8004f40:	6821      	ldr	r1, [r4, #0]
 8004f42:	3503      	adds	r5, #3
 8004f44:	1a6d      	subs	r5, r5, r1
 8004f46:	f025 0503 	bic.w	r5, r5, #3
 8004f4a:	3508      	adds	r5, #8
 8004f4c:	2d0c      	cmp	r5, #12
 8004f4e:	bf38      	it	cc
 8004f50:	250c      	movcc	r5, #12
 8004f52:	4638      	mov	r0, r7
 8004f54:	4629      	mov	r1, r5
 8004f56:	f7ff ffa5 	bl	8004ea4 <sbrk_aligned>
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d02b      	beq.n	8004fb6 <_malloc_r+0xd2>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	442b      	add	r3, r5
 8004f62:	6023      	str	r3, [r4, #0]
 8004f64:	e00e      	b.n	8004f84 <_malloc_r+0xa0>
 8004f66:	6822      	ldr	r2, [r4, #0]
 8004f68:	1b52      	subs	r2, r2, r5
 8004f6a:	d41e      	bmi.n	8004faa <_malloc_r+0xc6>
 8004f6c:	2a0b      	cmp	r2, #11
 8004f6e:	d916      	bls.n	8004f9e <_malloc_r+0xba>
 8004f70:	1961      	adds	r1, r4, r5
 8004f72:	42a3      	cmp	r3, r4
 8004f74:	6025      	str	r5, [r4, #0]
 8004f76:	bf18      	it	ne
 8004f78:	6059      	strne	r1, [r3, #4]
 8004f7a:	6863      	ldr	r3, [r4, #4]
 8004f7c:	bf08      	it	eq
 8004f7e:	6031      	streq	r1, [r6, #0]
 8004f80:	5162      	str	r2, [r4, r5]
 8004f82:	604b      	str	r3, [r1, #4]
 8004f84:	4638      	mov	r0, r7
 8004f86:	f104 060b 	add.w	r6, r4, #11
 8004f8a:	f000 f865 	bl	8005058 <__malloc_unlock>
 8004f8e:	f026 0607 	bic.w	r6, r6, #7
 8004f92:	1d23      	adds	r3, r4, #4
 8004f94:	1af2      	subs	r2, r6, r3
 8004f96:	d0b6      	beq.n	8004f06 <_malloc_r+0x22>
 8004f98:	1b9b      	subs	r3, r3, r6
 8004f9a:	50a3      	str	r3, [r4, r2]
 8004f9c:	e7b3      	b.n	8004f06 <_malloc_r+0x22>
 8004f9e:	6862      	ldr	r2, [r4, #4]
 8004fa0:	42a3      	cmp	r3, r4
 8004fa2:	bf0c      	ite	eq
 8004fa4:	6032      	streq	r2, [r6, #0]
 8004fa6:	605a      	strne	r2, [r3, #4]
 8004fa8:	e7ec      	b.n	8004f84 <_malloc_r+0xa0>
 8004faa:	4623      	mov	r3, r4
 8004fac:	6864      	ldr	r4, [r4, #4]
 8004fae:	e7b2      	b.n	8004f16 <_malloc_r+0x32>
 8004fb0:	4634      	mov	r4, r6
 8004fb2:	6876      	ldr	r6, [r6, #4]
 8004fb4:	e7b9      	b.n	8004f2a <_malloc_r+0x46>
 8004fb6:	230c      	movs	r3, #12
 8004fb8:	4638      	mov	r0, r7
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	f000 f84c 	bl	8005058 <__malloc_unlock>
 8004fc0:	e7a1      	b.n	8004f06 <_malloc_r+0x22>
 8004fc2:	6025      	str	r5, [r4, #0]
 8004fc4:	e7de      	b.n	8004f84 <_malloc_r+0xa0>
 8004fc6:	bf00      	nop
 8004fc8:	20000238 	.word	0x20000238

08004fcc <_realloc_r>:
 8004fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd0:	4680      	mov	r8, r0
 8004fd2:	4614      	mov	r4, r2
 8004fd4:	460e      	mov	r6, r1
 8004fd6:	b921      	cbnz	r1, 8004fe2 <_realloc_r+0x16>
 8004fd8:	4611      	mov	r1, r2
 8004fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fde:	f7ff bf81 	b.w	8004ee4 <_malloc_r>
 8004fe2:	b92a      	cbnz	r2, 8004ff0 <_realloc_r+0x24>
 8004fe4:	f7ff ff16 	bl	8004e14 <_free_r>
 8004fe8:	4625      	mov	r5, r4
 8004fea:	4628      	mov	r0, r5
 8004fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff0:	f000 f838 	bl	8005064 <_malloc_usable_size_r>
 8004ff4:	4284      	cmp	r4, r0
 8004ff6:	4607      	mov	r7, r0
 8004ff8:	d802      	bhi.n	8005000 <_realloc_r+0x34>
 8004ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ffe:	d812      	bhi.n	8005026 <_realloc_r+0x5a>
 8005000:	4621      	mov	r1, r4
 8005002:	4640      	mov	r0, r8
 8005004:	f7ff ff6e 	bl	8004ee4 <_malloc_r>
 8005008:	4605      	mov	r5, r0
 800500a:	2800      	cmp	r0, #0
 800500c:	d0ed      	beq.n	8004fea <_realloc_r+0x1e>
 800500e:	42bc      	cmp	r4, r7
 8005010:	4622      	mov	r2, r4
 8005012:	4631      	mov	r1, r6
 8005014:	bf28      	it	cs
 8005016:	463a      	movcs	r2, r7
 8005018:	f7ff fed4 	bl	8004dc4 <memcpy>
 800501c:	4631      	mov	r1, r6
 800501e:	4640      	mov	r0, r8
 8005020:	f7ff fef8 	bl	8004e14 <_free_r>
 8005024:	e7e1      	b.n	8004fea <_realloc_r+0x1e>
 8005026:	4635      	mov	r5, r6
 8005028:	e7df      	b.n	8004fea <_realloc_r+0x1e>
	...

0800502c <_sbrk_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	2300      	movs	r3, #0
 8005030:	4d05      	ldr	r5, [pc, #20]	; (8005048 <_sbrk_r+0x1c>)
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	f7fb ff58 	bl	8000eec <_sbrk>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d102      	bne.n	8005046 <_sbrk_r+0x1a>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	b103      	cbz	r3, 8005046 <_sbrk_r+0x1a>
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	bd38      	pop	{r3, r4, r5, pc}
 8005048:	20000240 	.word	0x20000240

0800504c <__malloc_lock>:
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <__malloc_lock+0x8>)
 800504e:	f000 b811 	b.w	8005074 <__retarget_lock_acquire_recursive>
 8005052:	bf00      	nop
 8005054:	20000244 	.word	0x20000244

08005058 <__malloc_unlock>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__malloc_unlock+0x8>)
 800505a:	f000 b80c 	b.w	8005076 <__retarget_lock_release_recursive>
 800505e:	bf00      	nop
 8005060:	20000244 	.word	0x20000244

08005064 <_malloc_usable_size_r>:
 8005064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005068:	1f18      	subs	r0, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	bfbc      	itt	lt
 800506e:	580b      	ldrlt	r3, [r1, r0]
 8005070:	18c0      	addlt	r0, r0, r3
 8005072:	4770      	bx	lr

08005074 <__retarget_lock_acquire_recursive>:
 8005074:	4770      	bx	lr

08005076 <__retarget_lock_release_recursive>:
 8005076:	4770      	bx	lr

08005078 <_init>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr

08005084 <_fini>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr
